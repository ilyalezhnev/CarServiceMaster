{"version":3,"sources":["services/AuthSevice.ts","models/auth.ts","services/CarPartsService.ts","models/carParts.ts","services/OfficesService.ts","models/offices.ts","services/CarPartsOfficesService.ts","models/carPartsOffices.ts","services/PromosService.ts","models/promos.ts","services/ReviewsService.ts","models/reviews.ts","services/MainPageService.ts","models/mainPage.ts","services/ServicesOfficesService.ts","services/ServicesService.ts","models/services.ts","services/CorporateClientsImagesService.ts","models/corporateClientsImages.ts","services/CorporateClientsService.ts","models/corporateClients.ts","services/UploadsService.ts","models/index.ts","models/uploads.ts","redux/store.ts","components/auth/Login.tsx","constants/urls.ts","components/common/SingleUpload.tsx","components/layout/CarPart.tsx","components/common/MarkdownTooltip.tsx","constants/tooltipText.ts","components/layout/CarParts.tsx","components/layout/Office.tsx","components/layout/Offices.tsx","components/layout/Review.tsx","components/layout/Reviews.tsx","components/layout/MainPage.tsx","components/layout/Service.tsx","components/common/NoContent.tsx","components/layout/Services.tsx","components/common/ImageGalaryUpload.tsx","components/layout/CorporateClients.tsx","components/layout/Promo.tsx","components/layout/Promos.tsx","components/layout/Main.tsx","components/common/Spiner.tsx","components/layout/Layout.tsx","App.tsx","index.tsx"],"names":["AuthSevice","login","params","axios","post","auth","createModel","state","isAuth","errors","reducers","logout","effects","d","onLogin","data","succces","localStorage","setItem","token","onLogout","removeItem","push","url","CarPartsService","getCarParts","get","addCarParts","updateCarParts","id","rest","put","carParts","setCarParts","offices","model","OfficesService","getOffices","addOffices","updateOffices","deleteOffices","delete","setOffices","CarPartsOfficesService","addCarPartsOffices","updateCarPartsOffices","deleteCarPartsOffices","carPartsOffices","PromosService","getPromos","addPromos","updatePromos","deletePromos","promos","setPromos","ReviewsService","getReviews","addReviews","updateReviews","deleteReviews","reviews","setRevies","MainPageService","getMainPage","addMainPage","updateMainPage","mainPage","setMainPage","ServicesOfficesService","addServicesOffices","updateServicesOffices","deleteServicesOffices","ImagesService","getServices","addServices","updateServices","deleteServices","services","setServices","ServicesService","servicesOffices","Promise","all","map","serviceOffice","officeId","serviceId","isAvailable","then","newServicesOffices","CorporateClientsImagesService","addCorporateClientsImages","corporateClientsImages","corporateClients","getCorporateClients","deleteCorporateClientsImages","imageId","uploads","deleteImage","status","CorporateClientsService","addCorporateClients","updateCorporateClients","setCorporateClients","UploadsService","rootModel","history","createBrowserHistory","loadingPlugin","createLoadingPlugin","asNumber","router","connectRouter","store","init","plugins","models","redux","rootReducers","resetStore","middlewares","routerMiddleware","connect","dispatch","justify","align","className","span","layout","name","initialValues","remember","onFinish","values","onFinishFailed","errorInfo","console","log","Item","label","rules","required","message","Password","type","htmlType","imageUploadUrl","window","location","origin","beforeUpload","file","isJpgOrPng","error","isLt2M","size","SingleUpload","form","formName","useState","loading","setLoading","imageUrl","setImageUrl","useEffect","uploadButton","LoadingOutlined","PlusOutlined","style","marginTop","width","height","listType","showUploadList","action","headers","Authorization","jwtToken","onChange","info","response","setFieldsValue","image","src","alt","oficesCarparts","office","carPartId","Form","useForm","description","carPartOffice","resetFields","placeholder","notFoundContent","item","some","oficesCarpart","Option","value","key","address","TextArea","rows","danger","marginLeft","onClick","MarkdownTooltip","text","dangerouslySetInnerHTML","__html","marked","tooltipText","title","titleHTML","setTitleHTML","subtitle","tooltip","event","target","backgroundColor","border","padding","margin","defaultActiveKey","length","toString","activeKey","TabPane","tab","defaultCoordinates","setDefaultCoordinates","markerRef","useRef","fullAddress","tel","fullTel","telegram","viber","whatsapp","email","lat","locationLat","lng","locationLon","workingHours","Number","eventHandlers","useMemo","dragend","marker","current","getLatLng","MapContainer","center","zoom","TileLayer","attribution","Marker","ref","position","draggable","review","fullName","serviceDescription","descriptionHTML","setDescriptionHTML","service","cost","icon","officesIds","updateData","filter","elem","addData","Group","NoContent","ImageGalaryUpload","images","saveImage","corporateClientImage","DeleteOutlined","fontSize","infoHTML","setInfoHTML","corporateClientId","promo","titleForMain","titleForMainHTML","setTitleForMainHTML","shortDescription","sliderImage","Header","Layout","Content","Main","selectedTab","setSelectedTab","theme","mode","selectedKeys","e","renderTab","Spiner","spinning","onGlobalLoading","global","isEligible","decoded","jwt_decode","currentTime","Date","now","exp","exact","path","component","Login","render","App","interceptors","request","use","config","getItem","reject","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.1016d30e.chunk.js","sourcesContent":["import axios from 'axios';\r\nimport { IAuth, IUserLogin } from '../models/auth';\r\n\r\nconst url = '/api/auth';\r\n\r\nconst AuthSevice = {\r\n  login: (params: IUserLogin) => axios.post<IAuth>(`${url}/login`, params)\r\n};\r\n\r\nexport default AuthSevice;\r\n","import { createModel } from '@rematch/core';\r\nimport { push } from 'connected-react-router';\r\nimport { IRootModel } from '.';\r\nimport AuthSevice from '../services/AuthSevice';\r\n\r\ninterface IState {\r\n  isAuth: boolean;\r\n  errors: any;\r\n}\r\n\r\nconst initialState: IState = {\r\n  isAuth: false,\r\n  errors: null,\r\n};\r\n\r\nexport interface IAuth {\r\n  succces: boolean;\r\n  token: string;\r\n}\r\n\r\nexport interface IUserLogin {\r\n  login: string;\r\n  password: string;\r\n}\r\n\r\nexport const auth = createModel<IRootModel>()({\r\n  state: initialState,\r\n  reducers: {\r\n    login(state): IState {\r\n      return { ...state, isAuth: true };\r\n    },\r\n    logout(state): IState {\r\n      return { ...state, isAuth: false };\r\n    },\r\n  },\r\n  effects: (d) => {\r\n    return {\r\n      async onLogin(params: IUserLogin) {\r\n        const { data } = await AuthSevice.login(params);\r\n        if (data.succces) {\r\n          localStorage.setItem('jwtToken', data.token);\r\n          d.auth.login();\r\n        }\r\n      },\r\n      async onLogout() {\r\n        localStorage.removeItem('jwtToken');\r\n        d(push('/'));\r\n        d.auth.logout();\r\n      },\r\n    };\r\n  },\r\n});\r\n","import axios from 'axios';\r\nimport { ICarParts } from '../models/carParts';\r\n\r\nconst url = '/api/admin/carparts';\r\n\r\nconst CarPartsService = {\r\n  getCarParts: () => axios.get<ICarParts>(url),\r\n  addCarParts: (data: ICarParts) => axios.post<ICarParts>(url, data),\r\n  updateCarParts: ({ id, ...rest }: ICarParts) => axios.put<ICarParts>(`${url}/${id}`, rest)\r\n};\r\n\r\nexport default CarPartsService;\r\n","import { createModel } from '@rematch/core';\r\nimport { IRootModel } from '.';\r\nimport CarPartsService from '../services/CarPartsService';\r\nimport { IOficesCarparts } from './offices';\r\n\r\ninterface IState {\r\n  data: ICarParts | null;\r\n}\r\n\r\nconst initialState: IState = {\r\n  data: null\r\n};\r\n\r\nexport interface ICarParts {\r\n  id: number;\r\n  title: string;\r\n  subtitle: string;\r\n  offices: IOficesCarparts[];\r\n}\r\n\r\nexport const carParts = createModel<IRootModel>()({\r\n  state: initialState,\r\n  reducers: {\r\n    setCarParts(state, data: ICarParts): IState {\r\n      const offices = state.data ? state.data.offices : [];\r\n      const carParts = { ...data, offices: data.offices ? data.offices : offices };\r\n      return { ...state, data: carParts };\r\n    }\r\n  },\r\n  effects: d => {\r\n    return {\r\n      async getCarParts() {\r\n        const { data } = await CarPartsService.getCarParts();\r\n        if (data) {\r\n          d.carParts.setCarParts(data);\r\n        }\r\n      },\r\n      async addCarParts(model: ICarParts) {\r\n        const { data } = await CarPartsService.addCarParts(model);\r\n        if (data) {\r\n          d.carParts.setCarParts(data);\r\n        }\r\n      },\r\n      async updateCarParts(model: ICarParts) {\r\n        const { data } = await CarPartsService.updateCarParts(model);\r\n        if (data) {\r\n          d.carParts.setCarParts(data);\r\n        }\r\n      }\r\n    };\r\n  }\r\n});\r\n","import axios from 'axios';\r\nimport { IOffices } from '../models/offices';\r\n\r\nconst url = '/api/admin/offices';\r\n\r\nconst OfficesService = {\r\n  getOffices: () => axios.get<IOffices[]>(url),\r\n  addOffices: (data: IOffices) => axios.post<IOffices>(url, data),\r\n  updateOffices: ({ id, ...rest }: IOffices) => axios.put<IOffices>(`${url}/${id}`, rest),\r\n  deleteOffices: (id: number) => axios.delete(`${url}/${id}`)\r\n};\r\n\r\nexport default OfficesService;\r\n","import { createModel } from '@rematch/core';\r\nimport { IRootModel } from '.';\r\nimport OfficesService from '../services/OfficesService';\r\nimport { ICarPartsOffices } from './carPartsOffices';\r\n\r\ninterface IState {\r\n  data: IOffices[] | null;\r\n}\r\n\r\nconst initialState: IState = {\r\n  data: null,\r\n};\r\n\r\nexport interface IOffices {\r\n  id: number;\r\n  address: string;\r\n  fullAddress: string;\r\n  tel: string;\r\n  fullTel: string;\r\n  telegram: string;\r\n  viber: string;\r\n  whatsapp: string;\r\n  description: string;\r\n  email: string;\r\n  locationLat: string;\r\n  locationLon: string;\r\n  workingHours: string;\r\n}\r\nexport interface IOfficesForm extends IOffices {\r\n  location: { lat: number; lng: number };\r\n}\r\n\r\nexport interface IOficesCarparts extends IOffices {\r\n  carPartOffice: ICarPartsOffices;\r\n}\r\n\r\nexport const offices = createModel<IRootModel>()({\r\n  state: initialState,\r\n  reducers: {\r\n    setOffices(state, data: IOffices[]): IState {\r\n      return { ...state, data };\r\n    },\r\n  },\r\n  effects: (d) => {\r\n    return {\r\n      async getOffices() {\r\n        const { data } = await OfficesService.getOffices();\r\n        if (data) {\r\n          d.offices.setOffices(data);\r\n        }\r\n      },\r\n      async addOffices(model: IOffices) {\r\n        const { data } = await OfficesService.addOffices(model);\r\n        if (data) {\r\n          d.offices.getOffices();\r\n        }\r\n      },\r\n      async updateOffices(model: IOffices) {\r\n        const { data } = await OfficesService.updateOffices(model);\r\n        if (data) {\r\n          d.offices.getOffices();\r\n        }\r\n      },\r\n      async deleteOffices(id: number) {\r\n        const { data } = await OfficesService.deleteOffices(id);\r\n        if (data) {\r\n          d.offices.getOffices();\r\n        }\r\n      },\r\n    };\r\n  },\r\n});\r\n","import axios from 'axios';\r\nimport { ICarParts } from '../models/carParts';\r\nimport { ICarPartsOffices } from '../models/carPartsOffices';\r\n\r\nconst url = '/api/admin/carpartsoffices';\r\n\r\nconst CarPartsOfficesService = {\r\n  addCarPartsOffices: (data: ICarPartsOffices) => axios.post<ICarParts>(url, data),\r\n  updateCarPartsOffices: ({ id, ...rest }: ICarPartsOffices) => axios.put<ICarPartsOffices>(`${url}/${id}`, rest),\r\n  deleteCarPartsOffices: (id: number) => axios.delete(`${url}/${id}`)\r\n};\r\n\r\nexport default CarPartsOfficesService;\r\n","import { createModel } from '@rematch/core';\r\nimport { IRootModel } from '.';\r\nimport CarPartsOfficesService from '../services/CarPartsOfficesService';\r\n\r\ninterface IState {\r\n  data: ICarPartsOffices | null;\r\n}\r\n\r\nconst initialState: IState = {\r\n  data: null\r\n};\r\n\r\nexport interface ICarPartsOffices {\r\n  id: number;\r\n  description: string;\r\n  image: string;\r\n  carPartId: number;\r\n  officeId: number;\r\n}\r\n\r\nexport const carPartsOffices = createModel<IRootModel>()({\r\n  state: initialState,\r\n  reducers: {},\r\n  effects: d => {\r\n    return {\r\n      async addCarPartsOffices(model: ICarPartsOffices) {\r\n        const { data } = await CarPartsOfficesService.addCarPartsOffices(model);\r\n        if (data) {\r\n          d.carParts.getCarParts();\r\n        }\r\n      },\r\n      async updateCarPartsOffices(model: ICarPartsOffices) {\r\n        const { data } = await CarPartsOfficesService.updateCarPartsOffices(model);\r\n        if (data) {\r\n          d.carParts.getCarParts();\r\n        }\r\n      },\r\n      async deleteCarPartsOffices(id: number) {\r\n        const { data } = await CarPartsOfficesService.deleteCarPartsOffices(id);\r\n        if (data) {\r\n          d.carParts.getCarParts();\r\n        }\r\n      }\r\n    };\r\n  }\r\n});\r\n","import axios from 'axios';\r\nimport { IPromos } from '../models/promos';\r\n\r\nconst url = '/api/admin/promos';\r\n\r\nconst PromosService = {\r\n  getPromos: () => axios.get<IPromos[]>(url),\r\n  addPromos: (data: IPromos) => axios.post<IPromos>(url, data),\r\n  updatePromos: ({ id, ...rest }: IPromos) => axios.put<IPromos>(`${url}/${id}`, rest),\r\n  deletePromos: (id: number) => axios.delete(`${url}/${id}`)\r\n};\r\n\r\nexport default PromosService;\r\n","import { createModel } from '@rematch/core';\r\nimport { IRootModel } from '.';\r\nimport PromosService from '../services/PromosService';\r\n\r\ninterface IState {\r\n  data: IPromos[] | null;\r\n}\r\n\r\nconst initialState: IState = {\r\n  data: null,\r\n};\r\n\r\nexport interface IPromos {\r\n  id: number;\r\n  titleForMain: string;\r\n  title: string;\r\n  description: string;\r\n  shortDescription: string;\r\n  image: string;\r\n  sliderImage: string;\r\n}\r\n\r\nexport const promos = createModel<IRootModel>()({\r\n  state: initialState,\r\n  reducers: {\r\n    setPromos(state, data: IPromos[]): IState {\r\n      return { ...state, data };\r\n    },\r\n  },\r\n  effects: (d) => {\r\n    return {\r\n      async getPromos() {\r\n        const { data } = await PromosService.getPromos();\r\n        if (data) {\r\n          d.promos.setPromos(data);\r\n        }\r\n      },\r\n      async addPromos(model: IPromos) {\r\n        const { data } = await PromosService.addPromos(model);\r\n        if (data) {\r\n          d.promos.getPromos();\r\n        }\r\n      },\r\n      async updatePromos(model: IPromos) {\r\n        const { data } = await PromosService.updatePromos(model);\r\n        if (data) {\r\n          d.promos.getPromos();\r\n        }\r\n      },\r\n      async deletePromos(id: number) {\r\n        const { data } = await PromosService.deletePromos(id);\r\n        if (data) {\r\n          d.promos.getPromos();\r\n        }\r\n      },\r\n    };\r\n  },\r\n});\r\n","import axios from 'axios';\r\nimport { IReviews } from '../models/reviews';\r\n\r\nconst url = '/api/admin/reviews';\r\n\r\nconst ReviewsService = {\r\n  getReviews: () => axios.get<IReviews[]>(url),\r\n  addReviews: (data: IReviews) => axios.post<IReviews>(url, data),\r\n  updateReviews: ({ id, ...rest }: IReviews) => axios.put<IReviews>(`${url}/${id}`, rest),\r\n  deleteReviews: (id: number) => axios.delete(`${url}/${id}`)\r\n};\r\n\r\nexport default ReviewsService;\r\n","import { createModel } from '@rematch/core';\r\nimport { IRootModel } from '.';\r\nimport ReviewsService from '../services/ReviewsService';\r\n\r\ninterface IState {\r\n  data: IReviews[] | null;\r\n}\r\n\r\nconst initialState: IState = {\r\n  data: null\r\n};\r\n\r\nexport interface IReviews {\r\n  id: number;\r\n  fullName: string;\r\n  text: string;\r\n  image: string;\r\n}\r\n\r\nexport const reviews = createModel<IRootModel>()({\r\n  state: initialState,\r\n  reducers: {\r\n    setRevies(state, data: IReviews[]): IState {\r\n      return { ...state, data };\r\n    }\r\n  },\r\n  effects: d => {\r\n    return {\r\n      async getReviews() {\r\n        const { data } = await ReviewsService.getReviews();\r\n        if (data) {\r\n          d.reviews.setRevies(data);\r\n        }\r\n      },\r\n      async addReviews(model: IReviews) {\r\n        const { data } = await ReviewsService.addReviews(model);\r\n        if (data) {\r\n          d.reviews.getReviews();\r\n        }\r\n      },\r\n      async updateReviews(model: IReviews) {\r\n        const { data } = await ReviewsService.updateReviews(model);\r\n        if (data) {\r\n          d.reviews.getReviews();\r\n        }\r\n      },\r\n      async deleteReviews(id: number) {\r\n        const { data } = await ReviewsService.deleteReviews(id);\r\n        if (data) {\r\n          d.reviews.getReviews();\r\n        }\r\n      }\r\n    };\r\n  }\r\n});\r\n","import axios from 'axios';\r\nimport { IMainPage } from '../models/mainPage';\r\n\r\nconst url = '/api/admin/mainpage';\r\n\r\nconst MainPageService = {\r\n  getMainPage: () => axios.get<IMainPage>(url),\r\n  addMainPage: ({ id, ...rest }: IMainPage) => axios.post<IMainPage>(url, rest),\r\n  updateMainPage: ({ id, ...rest }: IMainPage) => axios.put<IMainPage>(`${url}/${id}`, rest)\r\n};\r\n\r\nexport default MainPageService;\r\n","import { createModel } from '@rematch/core';\r\nimport { IRootModel } from '.';\r\nimport MainPageService from '../services/MainPageService';\r\n\r\ninterface IState {\r\n  data: IMainPage | null;\r\n}\r\n\r\nconst initialState: IState = {\r\n  data: null\r\n};\r\n\r\nexport interface IMainPage {\r\n  id: number;\r\n  title: string;\r\n  subtitle: string;\r\n  serviceDescription: string;\r\n}\r\n\r\nexport const mainPage = createModel<IRootModel>()({\r\n  state: initialState,\r\n  reducers: {\r\n    setMainPage(state, data: IMainPage): IState {\r\n      return { ...state, data };\r\n    }\r\n  },\r\n  effects: d => {\r\n    return {\r\n      async getMainPage() {\r\n        const { data } = await MainPageService.getMainPage();\r\n        if (data) {\r\n          d.mainPage.setMainPage(data);\r\n        }\r\n      },\r\n      async addMainPage(model: IMainPage) {\r\n        const { data } = await MainPageService.addMainPage(model);\r\n        if (data) {\r\n          d.mainPage.getMainPage();\r\n        }\r\n      },\r\n      async updateMainPage(model: IMainPage) {\r\n        const { data } = await MainPageService.updateMainPage(model);\r\n        if (data) {\r\n          d.mainPage.getMainPage();\r\n        }\r\n      }\r\n    };\r\n  }\r\n});\r\n","import axios from 'axios';\r\nimport { IServiceOffice } from '../models/services';\r\n\r\nconst url = '/api/admin/servicesoffices';\r\n\r\nconst ServicesOfficesService = {\r\n  addServicesOffices: (data: IServiceOffice) => axios.post<IServiceOffice>(url, data),\r\n  updateServicesOffices: ({ id, ...rest }: IServiceOffice) => axios.put<IServiceOffice>(`${url}/${id}`, rest),\r\n  deleteServicesOffices: (id: number) => axios.delete(`${url}/${id}`)\r\n};\r\n\r\nexport default ServicesOfficesService;\r\n","import axios from 'axios';\r\nimport { IServices, IServicesFromServer } from '../models/services';\r\n\r\nconst url = '/api/admin/services';\r\n\r\nconst ImagesService = {\r\n  getServices: () => axios.get<IServicesFromServer[]>(url),\r\n  addServices: (data: IServices) => axios.post<IServicesFromServer>(url, data),\r\n  updateServices: ({ id, ...rest }: IServices) => axios.put<IServicesFromServer>(`${url}/${id}`, rest),\r\n  deleteServices: (id: number) => axios.delete(`${url}/${id}`)\r\n};\r\n\r\nexport default ImagesService;\r\n","import { createModel } from '@rematch/core';\r\nimport { IRootModel } from '.';\r\nimport ServicesOfficesService from '../services/ServicesOfficesService';\r\nimport ServicesService from '../services/ServicesService';\r\nimport { IOffices } from './offices';\r\n\r\ninterface IState {\r\n  data: IServicesFromServer[] | null;\r\n}\r\n\r\nconst initialState: IState = {\r\n  data: null,\r\n};\r\n\r\nexport interface IServices {\r\n  id: number;\r\n  title: string;\r\n  cost: string;\r\n  description: string;\r\n  text: string;\r\n  image: string;\r\n  icon: string;\r\n}\r\nexport interface IServicesForm extends IServices {\r\n  officesIds: number[];\r\n}\r\nexport interface IServiceOffice {\r\n  id?: number;\r\n  isAvailable: boolean;\r\n  serviceId: number;\r\n  officeId: number;\r\n}\r\nexport interface IServicesOffices extends IOffices {\r\n  serviceOffice: IServiceOffice;\r\n}\r\nexport interface IServicesFromServer extends IServices {\r\n  offices: IServicesOffices[];\r\n}\r\nexport interface IServicesToServer extends IServices {\r\n  servicesOffices: { id?: number; officeId: number; isAvailable: boolean }[];\r\n  newServicesOffices?: { id?: number; officeId: number; isAvailable: boolean }[];\r\n}\r\n\r\nexport const services = createModel<IRootModel>()({\r\n  state: initialState,\r\n  reducers: {\r\n    setServices(state, data: IServicesFromServer[]): IState {\r\n      return { ...state, data };\r\n    },\r\n  },\r\n  effects: (d) => {\r\n    return {\r\n      async getServices() {\r\n        const { data } = await ServicesService.getServices();\r\n        if (data) {\r\n          d.services.setServices(data);\r\n        }\r\n      },\r\n      async addServices(model: IServicesToServer) {\r\n        const { servicesOffices, ...rest } = model;\r\n        const { data } = await ServicesService.addServices(rest);\r\n        await Promise.all(\r\n          servicesOffices.map((serviceOffice) => {\r\n            return ServicesOfficesService.addServicesOffices({\r\n              officeId: serviceOffice.officeId,\r\n              serviceId: data.id,\r\n              isAvailable: serviceOffice.isAvailable,\r\n            });\r\n          })\r\n        ).then(() => {\r\n          if (data) {\r\n            d.services.getServices();\r\n          }\r\n        });\r\n      },\r\n      async updateServices(model: IServicesToServer) {\r\n        const { servicesOffices, newServicesOffices, ...rest } = model;\r\n        const { data } = await ServicesService.updateServices(rest);\r\n        await Promise.all(\r\n          servicesOffices.map((serviceOffice) => {\r\n            return ServicesOfficesService.updateServicesOffices({\r\n              id: serviceOffice.id,\r\n              officeId: serviceOffice.officeId,\r\n              serviceId: data.id,\r\n              isAvailable: serviceOffice.isAvailable,\r\n            });\r\n          })\r\n        );\r\n        if (newServicesOffices) {\r\n          await Promise.all(\r\n            newServicesOffices.map((serviceOffice) => {\r\n              return ServicesOfficesService.addServicesOffices({\r\n                officeId: serviceOffice.officeId,\r\n                serviceId: data.id,\r\n                isAvailable: serviceOffice.isAvailable,\r\n              });\r\n            })\r\n          );\r\n        }\r\n        await d.services.getServices();\r\n      },\r\n      async deleteServices(id: number) {\r\n        const { data } = await ServicesService.deleteServices(id);\r\n        if (data) {\r\n          d.services.getServices();\r\n        }\r\n      },\r\n    };\r\n  },\r\n});\r\n","import axios from 'axios';\r\nimport { ICorporateClientImage } from '../models/corporateClientsImages';\r\n\r\nconst url = '/api/admin/corporateclientsimages';\r\n\r\nconst CorporateClientsImagesService = {\r\n  addCorporateClientsImages: (data: ICorporateClientImage) => axios.post<ICorporateClientImage>(url, data)\r\n};\r\n\r\nexport default CorporateClientsImagesService;\r\n","import { createModel } from '@rematch/core';\r\nimport { IRootModel } from '.';\r\nimport CorporateClientsImagesService from '../services/CorporateClientsImagesService';\r\n\r\ninterface IState {\r\n  data: ICorporateClientImage | null;\r\n}\r\n\r\nconst initialState: IState = {\r\n  data: null\r\n};\r\n\r\nexport interface ICorporatesClientImages {\r\n  filename: string;\r\n  extension: string;\r\n  url: string;\r\n  corporateClientImage: ICorporateClientImage;\r\n}\r\n\r\nexport interface ICorporateClientImage {\r\n  id?: number;\r\n  corporateClientId: number;\r\n  imageId: number;\r\n}\r\n\r\nexport const corporateClientsImages = createModel<IRootModel>()({\r\n  state: initialState,\r\n  reducers: {},\r\n  effects: d => {\r\n    return {\r\n      async addCorporateClientsImages(model: ICorporateClientImage) {\r\n        const { data } = await CorporateClientsImagesService.addCorporateClientsImages(model);\r\n        if (data) {\r\n          d.corporateClients.getCorporateClients();\r\n        }\r\n      },\r\n      async deleteCorporateClientsImages(imageId: number) {\r\n        const { status } = await d.uploads.deleteImage(imageId);\r\n        if (status === 200) {\r\n          d.corporateClients.getCorporateClients();\r\n        }\r\n      }\r\n    };\r\n  }\r\n});\r\n","import axios from 'axios';\r\nimport { ICorporateClients, ICorporateClientsFromServer } from '../models/corporateClients';\r\n\r\nconst url = '/api/admin/corporateclients';\r\n\r\nconst CorporateClientsService = {\r\n  getCorporateClients: () => axios.get<ICorporateClientsFromServer>(url),\r\n  addCorporateClients: (data: ICorporateClients) => axios.post<ICorporateClients>(url, data),\r\n  updateCorporateClients: ({ id, ...rest }: ICorporateClients) => axios.put<ICorporateClients>(`${url}/${id}`, rest)\r\n};\r\n\r\nexport default CorporateClientsService;\r\n","import { createModel } from '@rematch/core';\r\nimport { IRootModel } from '.';\r\nimport CorporateClientsService from '../services/CorporateClientsService';\r\nimport { ICorporatesClientImages } from './corporateClientsImages';\r\n\r\ninterface IState {\r\n  data: ICorporateClientsFromServer | null;\r\n}\r\n\r\nconst initialState: IState = {\r\n  data: null\r\n};\r\n\r\nexport interface ICorporateClients {\r\n  id?: number;\r\n  title: string;\r\n  description: string;\r\n  info: string;\r\n}\r\n\r\nexport interface ICorporateClientsFromServer extends ICorporateClients {\r\n  images: ICorporatesClientImages[];\r\n}\r\n\r\nexport const corporateClients = createModel<IRootModel>()({\r\n  state: initialState,\r\n  reducers: {\r\n    setCorporateClients(state, data: ICorporateClientsFromServer): IState {\r\n      return { ...state, data };\r\n    }\r\n  },\r\n  effects: d => {\r\n    return {\r\n      async getCorporateClients() {\r\n        const { data } = await CorporateClientsService.getCorporateClients();\r\n        if (data) {\r\n          d.corporateClients.setCorporateClients(data);\r\n        }\r\n      },\r\n      async addCorporateClients(model: ICorporateClients) {\r\n        const { data } = await CorporateClientsService.addCorporateClients(model);\r\n        if (data) {\r\n          d.corporateClients.getCorporateClients();\r\n        }\r\n      },\r\n      async updateCorporateClients(model: ICorporateClients) {\r\n        const { data } = await CorporateClientsService.updateCorporateClients(model);\r\n        if (data) {\r\n          d.corporateClients.getCorporateClients();\r\n        }\r\n      }\r\n    };\r\n  }\r\n});\r\n","import axios from 'axios';\r\n\r\nconst url = '/api/admin/uploads';\r\n\r\nconst UploadsService = {\r\n  deleteImage: (imageId: number) => axios.delete(`${url}/${imageId}`)\r\n};\r\n\r\nexport default UploadsService;\r\n","import { Models } from '@rematch/core';\r\nimport { auth } from './auth';\r\nimport { carParts } from './carParts';\r\nimport { offices } from './offices';\r\nimport { carPartsOffices } from './carPartsOffices';\r\nimport { promos } from './promos';\r\nimport { reviews } from './reviews';\r\nimport { mainPage } from './mainPage';\r\nimport { services } from './services';\r\nimport { corporateClientsImages } from './corporateClientsImages';\r\nimport { corporateClients } from './corporateClients';\r\nimport { uploads } from './uploads';\r\n\r\nexport interface IRootModel extends Models<IRootModel> {\r\n  auth: typeof auth;\r\n  carParts: typeof carParts;\r\n  offices: typeof offices;\r\n  carPartsOffices: typeof carPartsOffices;\r\n  promos: typeof promos;\r\n  reviews: typeof reviews;\r\n  mainPage: typeof mainPage;\r\n  services: typeof services;\r\n  corporateClients: typeof corporateClients;\r\n  corporateClientsImages: typeof corporateClientsImages;\r\n  uploads: typeof uploads;\r\n}\r\nconst rootModel: IRootModel = {\r\n  auth,\r\n  carParts,\r\n  offices,\r\n  carPartsOffices,\r\n  promos,\r\n  reviews,\r\n  mainPage,\r\n  services,\r\n  corporateClients,\r\n  corporateClientsImages,\r\n  uploads\r\n};\r\n\r\nexport default rootModel;\r\n","import { createModel } from '@rematch/core';\r\nimport { IRootModel } from '.';\r\nimport UploadsService from '../services/UploadsService';\r\n\r\ninterface IState {\r\n  data: IUploads | null;\r\n}\r\n\r\nconst initialState: IState = {\r\n  data: null\r\n};\r\n\r\nexport interface IUploads {\r\n  id: number;\r\n  extension: string;\r\n  filename: string;\r\n  url: string;\r\n}\r\n\r\nexport const uploads = createModel<IRootModel>()({\r\n  state: initialState,\r\n  reducers: {},\r\n  effects: d => {\r\n    return {\r\n      async deleteImage(imageId: number) {\r\n        return UploadsService.deleteImage(imageId);\r\n      }\r\n    };\r\n  }\r\n});\r\n","import { init, RematchDispatch, RematchRootState } from '@rematch/core';\r\nimport { createBrowserHistory } from 'history';\r\nimport createLoadingPlugin from '@rematch/loading';\r\nimport { connectRouter, routerMiddleware } from 'connected-react-router';\r\nimport models, { IRootModel } from '../models';\r\n\r\nexport const history = createBrowserHistory();\r\n\r\nconst loadingPlugin = createLoadingPlugin<IRootModel>({ asNumber: false });\r\nconst router = connectRouter(history);\r\n\r\nexport const store = init({\r\n  plugins: [loadingPlugin],\r\n  models,\r\n  redux: {\r\n    rootReducers: {\r\n      resetStore: () => undefined\r\n    },\r\n    middlewares: [routerMiddleware(history)],\r\n    reducers: {\r\n      router\r\n    }\r\n  }\r\n});\r\n\r\ninterface ILoadingPlugin {\r\n  loading: {\r\n    global: boolean;\r\n    models: RematchRootState<IRootModel>;\r\n    effects: Dispatch;\r\n  };\r\n}\r\n\r\ninterface IConnectedRouter {\r\n  router: {\r\n    location: {\r\n      pathname: string;\r\n      search: string;\r\n      hash: string;\r\n      key: string;\r\n      query: { [key: string]: string };\r\n    };\r\n  };\r\n}\r\n\r\nexport type Store = typeof store;\r\nexport type Dispatch = RematchDispatch<IRootModel>;\r\nexport type IRootState = RematchRootState<IRootModel> & ILoadingPlugin & IConnectedRouter;\r\nexport const dispatchResetStore = () => store.dispatch({ type: 'resetStore' });\r\n","import React, { FC } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Dispatch, IRootState } from '../../redux/store';\r\nimport { Button, Col, Form, Input, Row } from 'antd';\r\nimport { IUserLogin } from '../../models/auth';\r\n\r\nconst mapState = (state: IRootState) => ({});\r\n\r\nconst mapDispatch = (dispatch: Dispatch) => ({ onLogin: dispatch.auth.onLogin });\r\n\r\ntype connectedProps = ReturnType<typeof mapState> & ReturnType<typeof mapDispatch>;\r\n\r\ntype IProps = connectedProps & {};\r\n\r\nconst Login: FC<IProps> = ({ onLogin }) => {\r\n  const onFinish = (values: IUserLogin) => {\r\n    onLogin({ ...values });\r\n  };\r\n\r\n  const onFinishFailed = (errorInfo: any) => {\r\n    console.log('Failed:', errorInfo);\r\n  };\r\n\r\n  return (\r\n    <Row justify=\"center\" align=\"middle\" className=\"login-wrapper\">\r\n      <Col span={10}>\r\n        <Form\r\n          layout=\"vertical\"\r\n          name=\"basic\"\r\n          initialValues={{ remember: true }}\r\n          onFinish={onFinish}\r\n          onFinishFailed={onFinishFailed}\r\n        >\r\n          <Form.Item label=\"Логин\" name=\"login\" rules={[{ required: true, message: 'Введите логин' }]}>\r\n            <Input />\r\n          </Form.Item>\r\n\r\n          <Form.Item label=\"Пароль\" name=\"password\" rules={[{ required: true, message: 'Введите пароль' }]}>\r\n            <Input.Password />\r\n          </Form.Item>\r\n\r\n          <Form.Item>\r\n            <Button type=\"primary\" htmlType=\"submit\">\r\n              Submit\r\n            </Button>\r\n          </Form.Item>\r\n        </Form>\r\n      </Col>\r\n    </Row>\r\n  );\r\n};\r\n\r\nexport default connect(mapState, mapDispatch)(Login);\r\n","export const imageUploadUrl = `${window.location.origin}/api/admin/uploads`;\r\n","import React, { FC, useEffect, useState } from 'react';\r\nimport { Upload, message } from 'antd';\r\nimport { LoadingOutlined, PlusOutlined } from '@ant-design/icons';\r\nimport { RcFile, UploadChangeParam, UploadFile } from 'antd/lib/upload/interface';\r\nimport { IUploads } from '../../models/uploads';\r\nimport { FormInstance } from 'antd/lib/form/Form';\r\nimport { imageUploadUrl } from '../../constants/urls';\r\n\r\nfunction beforeUpload(file: RcFile) {\r\n  const isJpgOrPng = file.type === 'image/jpeg' || file.type === 'image/png' || file.type === 'image/svg+xml';\r\n  if (!isJpgOrPng) {\r\n    message.error('Можно загружать только JPG/PNG/SVG файлы!');\r\n  }\r\n  const isLt2M = file.size / 1024 / 1024 < 5;\r\n  if (!isLt2M) {\r\n    message.error('Картинка должна быть меньше 5MB!');\r\n  }\r\n  return isJpgOrPng && isLt2M;\r\n}\r\n\r\ninterface IProps {\r\n  form: FormInstance<any>;\r\n  formName?: string;\r\n  url?: string;\r\n}\r\n\r\nconst SingleUpload: FC<IProps> = ({ form, url, formName }) => {\r\n  const [loading, setLoading] = useState<boolean>(false);\r\n  const [imageUrl, setImageUrl] = useState<string>(url || '');\r\n  useEffect(() => {\r\n    if (url) {\r\n      setImageUrl(url);\r\n    }\r\n  }, [url]);\r\n  const handleChange = (info: UploadChangeParam<UploadFile<IUploads>>) => {\r\n    if (info.file.status === 'uploading') {\r\n      setLoading(true);\r\n      return;\r\n    }\r\n    if (info.file.status === 'done') {\r\n      setLoading(false);\r\n      if (info.file.response) {\r\n        setImageUrl(info.file.response.url);\r\n        form.setFieldsValue(formName ? { [formName]: info.file.response.url } : { image: info.file.response.url });\r\n      }\r\n    }\r\n  };\r\n\r\n  const uploadButton = (\r\n    <div>\r\n      {loading ? <LoadingOutlined /> : <PlusOutlined />}\r\n      <div style={{ marginTop: 8 }}>Загрузить</div>\r\n    </div>\r\n  );\r\n  return (\r\n    <Upload\r\n      style={{ width: '200px', height: '200px' }}\r\n      name=\"avatar\"\r\n      listType=\"picture-card\"\r\n      showUploadList={false}\r\n      action={imageUploadUrl}\r\n      headers={{ Authorization: localStorage.jwtToken }}\r\n      beforeUpload={beforeUpload}\r\n      onChange={handleChange}\r\n    >\r\n      {imageUrl ? <img src={imageUrl} alt=\"avatar\" style={{ width: '100%' }} /> : uploadButton}\r\n    </Upload>\r\n  );\r\n};\r\n\r\nexport default SingleUpload;\r\n","import React, { FC, useEffect } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Dispatch, IRootState } from '../../redux/store';\r\nimport { Button, Form, Input, Select } from 'antd';\r\nimport { IOficesCarparts } from '../../models/offices';\r\nimport { ICarPartsOffices } from '../../models/carPartsOffices';\r\nimport SingleUpload from '../common/SingleUpload';\r\n\r\nconst iconContainer: React.CSSProperties = {\r\n  marginBottom: '20px',\r\n  position: 'relative'\r\n};\r\nconst icon: React.CSSProperties = {\r\n  position: 'absolute',\r\n  top: '14px',\r\n  left: '14px',\r\n  zIndex: 1,\r\n  cursor: 'pointer'\r\n};\r\n\r\nconst mapState = (state: IRootState) => ({\r\n  offices: state.offices.data\r\n});\r\n\r\nconst mapDispatch = (dispatch: Dispatch) => ({\r\n  addCarPartsOffices: dispatch.carPartsOffices.addCarPartsOffices,\r\n  updateCarPartsOffices: dispatch.carPartsOffices.updateCarPartsOffices,\r\n  deleteCarPartsOffices: dispatch.carPartsOffices.deleteCarPartsOffices,\r\n  getOffices: dispatch.offices.getOffices\r\n});\r\n\r\ntype connectedProps = ReturnType<typeof mapState> & ReturnType<typeof mapDispatch>;\r\n\r\ntype IProps = connectedProps & {\r\n  oficesCarparts: IOficesCarparts[];\r\n  office?: IOficesCarparts;\r\n  carPartId: number;\r\n};\r\n\r\nconst CarPart: FC<IProps> = ({\r\n  oficesCarparts,\r\n  office,\r\n  carPartId,\r\n  addCarPartsOffices,\r\n  updateCarPartsOffices,\r\n  deleteCarPartsOffices,\r\n  getOffices,\r\n  offices\r\n}) => {\r\n  const [form] = Form.useForm();\r\n\r\n  useEffect(() => {\r\n    form.setFieldsValue({\r\n      description: office && office.carPartOffice.description,\r\n      image: ''\r\n    });\r\n  }, [office]);\r\n\r\n  useEffect(() => {\r\n    getOffices();\r\n  }, []);\r\n\r\n  const onFinish = (values: ICarPartsOffices) => {\r\n    if (office) {\r\n      updateCarPartsOffices({ ...values, id: office.carPartOffice.id });\r\n    } else {\r\n      addCarPartsOffices({ ...values, carPartId, officeId: values.officeId });\r\n    }\r\n    form.resetFields();\r\n  };\r\n\r\n  const onFinishFailed = (errorInfo: any) => {\r\n    console.log('Failed:', errorInfo);\r\n  };\r\n\r\n  const onDeleteOffice = () => {\r\n    if (office) {\r\n      deleteCarPartsOffices(office.carPartOffice.id);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Form form={form} name=\"carpart\" layout=\"vertical\" onFinish={onFinish} onFinishFailed={onFinishFailed}>\r\n      {!office && offices && (\r\n        <Form.Item name=\"officeId\" label=\"Офис\" rules={[{ required: true, message: 'Выберите офис' }]}>\r\n          <Select placeholder=\"Выберите офис\" notFoundContent=\"Все офисы использованы, добавьте новый\">\r\n            {offices.map(item => {\r\n              if (oficesCarparts.some(oficesCarpart => oficesCarpart.id === item.id)) {\r\n                return null;\r\n              }\r\n              return (\r\n                <Select.Option value={item.id} key={item.id}>\r\n                  {item.address}\r\n                </Select.Option>\r\n              );\r\n            })}\r\n          </Select>\r\n        </Form.Item>\r\n      )}\r\n      <Form.Item label=\"Описание\" name=\"description\" rules={[{ required: true, message: 'Введите описание' }]}>\r\n        <Input.TextArea rows={4} />\r\n      </Form.Item>\r\n      {office && (\r\n        <Form.Item label=\"Картинка\" name=\"image\">\r\n          <SingleUpload form={form} url={office.carPartOffice.image} />\r\n        </Form.Item>\r\n      )}\r\n      {!office && (\r\n        <Form.Item label=\"Картинка\" name=\"image\">\r\n          <SingleUpload form={form} />\r\n        </Form.Item>\r\n      )}\r\n      <Form.Item>\r\n        <Button type=\"primary\" htmlType=\"submit\">\r\n          Сохранить\r\n        </Button>\r\n        {office && (\r\n          <Button type=\"primary\" danger style={{ marginLeft: '10px' }} onClick={onDeleteOffice}>\r\n            Удалить\r\n          </Button>\r\n        )}\r\n      </Form.Item>\r\n    </Form>\r\n  );\r\n};\r\n\r\nexport default connect(mapState, mapDispatch)(CarPart);\r\n","import React, { FC } from 'react';\r\nimport marked from 'marked';\r\n\r\ninterface IProps {\r\n  text: string;\r\n}\r\n\r\nconst MarkdownTooltip: FC<IProps> = ({ text }) => {\r\n  return (\r\n    <div className=\"markdownTooltip\">\r\n      <pre>{text}</pre>\r\n      <div dangerouslySetInnerHTML={{ __html: marked(text) }} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MarkdownTooltip;\r\n","export const tooltipText = `# Заголовок размер 1\r\n\r\n## Заголовок размер 2\r\n\r\n### Заголовок размер 3\r\n\r\n#### Заголовок размер 4\r\n\r\n1. Нумерованный список.\r\n2. Нумерованный список.\r\n\r\nПростой параграф [ссылка]\r\n\r\n- Маркированный **список**.\r\n- Маркированный **список**\r\n\r\n[ссылка]: https://ptzmaster.com/`;\r\n","import React, { FC, useEffect, useState } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Dispatch, IRootState } from '../../redux/store';\r\nimport { Button, Col, Form, Input, Row, Tabs } from 'antd';\r\nimport { ICarParts } from '../../models/carParts';\r\nimport CarPart from './CarPart';\r\nimport marked from 'marked';\r\nimport MarkdownTooltip from '../common/MarkdownTooltip';\r\nimport { tooltipText } from '../../constants/tooltipText';\r\n\r\nconst mapState = (state: IRootState) => ({\r\n  carParts: state.carParts.data\r\n});\r\n\r\nconst mapDispatch = (dispatch: Dispatch) => ({\r\n  getCarParts: dispatch.carParts.getCarParts,\r\n  addCarParts: dispatch.carParts.addCarParts,\r\n  updateCarParts: dispatch.carParts.updateCarParts\r\n});\r\n\r\ntype connectedProps = ReturnType<typeof mapState> & ReturnType<typeof mapDispatch>;\r\n\r\ntype IProps = connectedProps & {};\r\n\r\nconst CarParts: FC<IProps> = ({ carParts, getCarParts, addCarParts, updateCarParts }) => {\r\n  const [titleHTML, setTitleHTML] = useState<string>((carParts && carParts.title) || '');\r\n\r\n  useEffect(() => {\r\n    getCarParts();\r\n  }, []);\r\n\r\n  const [form] = Form.useForm();\r\n\r\n  useEffect(() => {\r\n    form.setFieldsValue({\r\n      title: carParts && carParts.title,\r\n      subtitle: carParts && carParts.subtitle\r\n    });\r\n    setTitleHTML((carParts && carParts.title) || '');\r\n  }, [carParts]);\r\n\r\n  const onFinish = (values: ICarParts) => {\r\n    if (carParts) {\r\n      updateCarParts({ ...values, id: carParts.id });\r\n    } else {\r\n      addCarParts(values);\r\n    }\r\n  };\r\n\r\n  const onFinishFailed = (errorInfo: any) => {\r\n    console.log('Failed:', errorInfo);\r\n  };\r\n\r\n  const onTitleChange = (event: React.ChangeEvent<HTMLTextAreaElement>) => {\r\n    setTitleHTML(event.target.value || '');\r\n  };\r\n\r\n  const onTabChange = (activeKey: string) => {};\r\n\r\n  return (\r\n    <>\r\n      <Row justify=\"center\" className=\"login-wrapper\">\r\n        <Col span={22}>\r\n          <Form form={form} layout=\"vertical\" name=\"carparts\" onFinish={onFinish} onFinishFailed={onFinishFailed}>\r\n            <Form.Item\r\n              label=\"Заголовок\"\r\n              name=\"title\"\r\n              tooltip={<MarkdownTooltip text={tooltipText} />}\r\n              rules={[{ required: true, message: 'Введите заголовок' }]}\r\n            >\r\n              <Input.TextArea rows={2} onChange={onTitleChange} />\r\n            </Form.Item>\r\n            {titleHTML && (\r\n              <div>\r\n                Предпросмотр заголовка\r\n                <div\r\n                  dangerouslySetInnerHTML={{ __html: marked(titleHTML) }}\r\n                  style={{ backgroundColor: 'white', border: '1px solid #d9d9d9', padding: '10px', margin: '10px 0px 20px 0px' }}\r\n                />\r\n              </div>\r\n            )}\r\n            <Form.Item label=\"Подзаголовок\" name=\"subtitle\" rules={[{ required: true, message: 'Введите подзаголовок' }]}>\r\n              <Input.TextArea rows={2} />\r\n            </Form.Item>\r\n            <Form.Item>\r\n              <Button type=\"primary\" htmlType=\"submit\">\r\n                Сохранить\r\n              </Button>\r\n            </Form.Item>\r\n          </Form>\r\n        </Col>\r\n      </Row>\r\n      <Row justify=\"center\" align=\"middle\" className=\"page-wrapper\">\r\n        <Col span={22}>\r\n          {carParts && carParts.offices && (\r\n            <Tabs\r\n              defaultActiveKey={carParts.offices.length ? carParts.offices[0].id.toString() : 'new'}\r\n              onChange={onTabChange}\r\n              type=\"card\"\r\n            >\r\n              {carParts.offices.map(office => (\r\n                <Tabs.TabPane tab={office.address} key={office.id}>\r\n                  <CarPart oficesCarparts={carParts.offices} office={office} carPartId={carParts.id} />\r\n                </Tabs.TabPane>\r\n              ))}\r\n              <Tabs.TabPane tab=\"+\" key=\"new\">\r\n                <CarPart oficesCarparts={carParts.offices} carPartId={carParts.id} />\r\n              </Tabs.TabPane>\r\n            </Tabs>\r\n          )}\r\n        </Col>\r\n      </Row>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default connect(mapState, mapDispatch)(CarParts);\r\n","import React, { FC, useEffect, useMemo, useRef, useState } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Dispatch, IRootState } from '../../redux/store';\r\nimport { Button, Form, Input } from 'antd';\r\nimport { IOffices, IOfficesForm } from '../../models/offices';\r\nimport { MapContainer, Marker, TileLayer } from 'react-leaflet';\r\nimport { LatLngExpression } from 'leaflet';\r\n\r\nconst mapState = (state: IRootState) => ({});\r\n\r\nconst mapDispatch = (dispatch: Dispatch) => ({\r\n  addOffices: dispatch.offices.addOffices,\r\n  updateOffices: dispatch.offices.updateOffices,\r\n  deleteOffices: dispatch.offices.deleteOffices,\r\n});\r\n\r\ntype connectedProps = ReturnType<typeof mapState> & ReturnType<typeof mapDispatch>;\r\n\r\ntype IProps = connectedProps & {\r\n  office?: IOffices;\r\n};\r\n\r\nconst Office: FC<IProps> = ({ office, addOffices, updateOffices, deleteOffices }) => {\r\n  const [defaultCoordinates, setDefaultCoordinates] = useState<LatLngExpression>([61.789281, 34.368563]);\r\n  const [form] = Form.useForm();\r\n  const markerRef = useRef<any>();\r\n\r\n  useEffect(() => {\r\n    if (office) {\r\n      form.setFieldsValue({\r\n        address: office.address,\r\n        fullAddress: office.fullAddress,\r\n        tel: office.tel,\r\n        fullTel: office.fullTel,\r\n        telegram: office.telegram,\r\n        viber: office.viber,\r\n        whatsapp: office.whatsapp,\r\n        email: office.email,\r\n        description: office.description,\r\n        location: {\r\n          lat: office.locationLat,\r\n          lng: office.locationLon,\r\n        },\r\n        workingHours: office.workingHours,\r\n      });\r\n      setDefaultCoordinates([Number(office.locationLat), Number(office.locationLon)]);\r\n    }\r\n  }, [office, form]);\r\n\r\n  const onFinish = (values: IOfficesForm) => {\r\n    const { location, ...rest } = values;\r\n    const locationLat = (location && location.lat.toString()) || '61.789281';\r\n    const locationLon = (location && location.lng.toString()) || '34.368563';\r\n    if (office) {\r\n      updateOffices({ ...rest, locationLat, locationLon, id: office.id });\r\n    } else {\r\n      addOffices({ ...rest, locationLat, locationLon });\r\n    }\r\n    form.resetFields();\r\n  };\r\n\r\n  const onFinishFailed = (errorInfo: any) => {\r\n    console.log('Failed:', errorInfo);\r\n  };\r\n\r\n  const onDeleteOffice = () => {\r\n    if (office) {\r\n      deleteOffices(office.id);\r\n    }\r\n  };\r\n  const eventHandlers = useMemo(\r\n    () => ({\r\n      dragend() {\r\n        const marker = markerRef.current;\r\n        if (marker !== null) {\r\n          form.setFieldsValue({ location: { lat: marker.getLatLng().lat, lng: marker.getLatLng().lng } });\r\n        }\r\n      },\r\n    }),\r\n    [form]\r\n  );\r\n\r\n  return (\r\n    <Form form={form} layout=\"vertical\" name=\"office\" onFinish={onFinish} onFinishFailed={onFinishFailed}>\r\n      <Form.Item label=\"Адрес\" name=\"address\" rules={[{ required: true, message: 'Введите заголовок' }]}>\r\n        <Input />\r\n      </Form.Item>\r\n      <Form.Item label=\"Полный адрес\" name=\"fullAddress\" rules={[{ required: true, message: 'Введите подзаголовок' }]}>\r\n        <Input />\r\n      </Form.Item>\r\n      <Form.Item label=\"Короткий телефон\" name=\"tel\" rules={[{ required: true, message: 'Укажите телефон' }]}>\r\n        <Input />\r\n      </Form.Item>\r\n      <Form.Item label=\"Полный телефон\" name=\"fullTel\" rules={[{ required: true, message: 'Укажите полный телефон' }]}>\r\n        <Input />\r\n      </Form.Item>\r\n      <Form.Item label=\"Email\" name=\"email\" rules={[{ required: true, message: 'Укажите email' }]}>\r\n        <Input />\r\n      </Form.Item>\r\n      <Form.Item label=\"Telegram\" name=\"telegram\" rules={[{ required: true, message: 'Укажите Telegram' }]}>\r\n        <Input />\r\n      </Form.Item>\r\n      <Form.Item label=\"Viber\" name=\"viber\" rules={[{ required: true, message: 'Укажите viber' }]}>\r\n        <Input />\r\n      </Form.Item>\r\n      <Form.Item label=\"Whatsapp\" name=\"whatsapp\" rules={[{ required: true, message: 'Укажите whatsapp' }]}>\r\n        <Input />\r\n      </Form.Item>\r\n      <Form.Item label=\"Описание\" name=\"description\" rules={[{ required: true, message: 'Введите описание' }]}>\r\n        <Input.TextArea rows={4} />\r\n      </Form.Item>\r\n      <Form.Item label=\"Часы работы\" name=\"workingHours\">\r\n        <Input />\r\n      </Form.Item>\r\n      <Form.Item name=\"location\">\r\n        <MapContainer center={defaultCoordinates} zoom={13}>\r\n          <TileLayer\r\n            attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n            url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n          />\r\n          <Marker ref={markerRef} position={defaultCoordinates} draggable eventHandlers={eventHandlers}></Marker>\r\n        </MapContainer>\r\n      </Form.Item>\r\n\r\n      <Form.Item>\r\n        <Button type=\"primary\" htmlType=\"submit\">\r\n          Сохранить\r\n        </Button>\r\n        {office && (\r\n          <Button type=\"primary\" danger style={{ marginLeft: '10px' }} onClick={onDeleteOffice}>\r\n            Удалить\r\n          </Button>\r\n        )}\r\n      </Form.Item>\r\n    </Form>\r\n  );\r\n};\r\n\r\nexport default connect(mapState, mapDispatch)(Office);\r\n","import React, { FC, useEffect } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Dispatch, IRootState } from '../../redux/store';\r\nimport { Col, Row, Tabs } from 'antd';\r\nimport Office from './Office';\r\n\r\nconst mapState = (state: IRootState) => ({\r\n  offices: state.offices.data,\r\n});\r\n\r\nconst mapDispatch = (dispatch: Dispatch) => ({\r\n  getOffices: dispatch.offices.getOffices,\r\n});\r\n\r\ntype connectedProps = ReturnType<typeof mapState> & ReturnType<typeof mapDispatch>;\r\n\r\ntype IProps = connectedProps & {};\r\n\r\nconst Offices: FC<IProps> = ({ offices, getOffices }) => {\r\n  useEffect(() => {\r\n    getOffices();\r\n  }, [getOffices]);\r\n\r\n  const onTabChange = (activeKey: string) => {};\r\n\r\n  return (\r\n    <Row justify=\"center\" align=\"middle\" className=\"page-wrapper\">\r\n      <Col span={22}>\r\n        {offices && (\r\n          <Tabs\r\n            defaultActiveKey={offices && offices.length ? offices[0].id.toString() : 'new'}\r\n            onChange={onTabChange}\r\n            type=\"card\"\r\n          >\r\n            {offices &&\r\n              offices.map((office) => (\r\n                <Tabs.TabPane tab={office.address} key={office.id}>\r\n                  <Office office={office} />\r\n                </Tabs.TabPane>\r\n              ))}\r\n            <Tabs.TabPane tab=\"+\" key=\"new\">\r\n              <Office />\r\n            </Tabs.TabPane>\r\n          </Tabs>\r\n        )}\r\n      </Col>\r\n    </Row>\r\n  );\r\n};\r\n\r\nexport default connect(mapState, mapDispatch)(Offices);\r\n","import React, { FC, useEffect } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Dispatch, IRootState } from '../../redux/store';\r\nimport { Button, Form, Input } from 'antd';\r\nimport { IReviews } from '../../models/reviews';\r\nimport SingleUpload from '../common/SingleUpload';\r\n\r\nconst mapState = (state: IRootState) => ({});\r\n\r\nconst mapDispatch = (dispatch: Dispatch) => ({\r\n  addReviews: dispatch.reviews.addReviews,\r\n  updateReviews: dispatch.reviews.updateReviews,\r\n  deleteReviews: dispatch.reviews.deleteReviews,\r\n});\r\n\r\ntype connectedProps = ReturnType<typeof mapState> & ReturnType<typeof mapDispatch>;\r\n\r\ntype IProps = connectedProps & {\r\n  review?: IReviews;\r\n};\r\n\r\nconst Review: FC<IProps> = ({ review, addReviews, updateReviews, deleteReviews }) => {\r\n  const [form] = Form.useForm();\r\n\r\n  useEffect(() => {\r\n    form.setFieldsValue({\r\n      fullName: review && review.fullName,\r\n      text: review && review.text,\r\n      image: '',\r\n    });\r\n  }, [review, form]);\r\n\r\n  const onFinish = (values: IReviews) => {\r\n    if (review) {\r\n      updateReviews({ ...values, id: review.id });\r\n    } else {\r\n      addReviews(values);\r\n    }\r\n    form.resetFields();\r\n  };\r\n\r\n  const onFinishFailed = (errorInfo: any) => {\r\n    console.log('Failed:', errorInfo);\r\n  };\r\n\r\n  const onDeleteReview = () => {\r\n    if (review) {\r\n      deleteReviews(review.id);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Form form={form} layout=\"vertical\" name=\"review\" onFinish={onFinish} onFinishFailed={onFinishFailed}>\r\n      <Form.Item label=\"Имя Фамилия\" name=\"fullName\" rules={[{ required: true, message: 'Введите имя и фамилию' }]}>\r\n        <Input />\r\n      </Form.Item>\r\n      <Form.Item label=\"Отзыв\" name=\"text\" rules={[{ required: true, message: 'Введите отзыв' }]}>\r\n        <Input.TextArea rows={4} />\r\n      </Form.Item>\r\n      {review && (\r\n        <Form.Item label=\"Картинка\" name=\"image\">\r\n          <SingleUpload form={form} url={review.image} />\r\n        </Form.Item>\r\n      )}\r\n      {!review && (\r\n        <Form.Item label=\"Картинка\" name=\"image\">\r\n          <SingleUpload form={form} />\r\n        </Form.Item>\r\n      )}\r\n\r\n      <Form.Item>\r\n        <Button type=\"primary\" htmlType=\"submit\">\r\n          Сохранить\r\n        </Button>\r\n        {review && (\r\n          <Button type=\"primary\" danger style={{ marginLeft: '10px' }} onClick={onDeleteReview}>\r\n            Удалить\r\n          </Button>\r\n        )}\r\n      </Form.Item>\r\n    </Form>\r\n  );\r\n};\r\n\r\nexport default connect(mapState, mapDispatch)(Review);\r\n","import React, { FC, useEffect } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Dispatch, IRootState } from '../../redux/store';\r\nimport { Col, Row, Tabs } from 'antd';\r\nimport Review from './Review';\r\n\r\nconst mapState = (state: IRootState) => ({\r\n  reviews: state.reviews.data,\r\n});\r\n\r\nconst mapDispatch = (dispatch: Dispatch) => ({\r\n  getReviews: dispatch.reviews.getReviews,\r\n});\r\n\r\ntype connectedProps = ReturnType<typeof mapState> & ReturnType<typeof mapDispatch>;\r\n\r\ntype IProps = connectedProps & {};\r\n\r\nconst Reviews: FC<IProps> = ({ reviews, getReviews }) => {\r\n  useEffect(() => {\r\n    getReviews();\r\n  }, [getReviews]);\r\n\r\n  const onTabChange = (activeKey: string) => {};\r\n\r\n  return (\r\n    <Row justify=\"center\" align=\"middle\" className=\"page-wrapper\">\r\n      <Col span={22}>\r\n        <Tabs defaultActiveKey={reviews && reviews.length ? reviews[0].id.toString() : 'new'} onChange={onTabChange} type=\"card\">\r\n          {reviews &&\r\n            reviews.map((review) => (\r\n              <Tabs.TabPane tab={review.fullName} key={review.id}>\r\n                <Review review={review} />\r\n              </Tabs.TabPane>\r\n            ))}\r\n          <Tabs.TabPane tab=\"+\" key=\"new\">\r\n            <Review />\r\n          </Tabs.TabPane>\r\n        </Tabs>\r\n      </Col>\r\n    </Row>\r\n  );\r\n};\r\n\r\nexport default connect(mapState, mapDispatch)(Reviews);\r\n","import React, { FC, useEffect, useState } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Dispatch, IRootState } from '../../redux/store';\r\nimport { Button, Form, Input } from 'antd';\r\nimport { IReviews } from '../../models/reviews';\r\nimport { IMainPage } from '../../models/mainPage';\r\nimport marked from 'marked';\r\nimport MarkdownTooltip from '../common/MarkdownTooltip';\r\nimport { tooltipText } from '../../constants/tooltipText';\r\n\r\nconst mapState = (state: IRootState) => ({\r\n  mainPage: state.mainPage.data,\r\n});\r\n\r\nconst mapDispatch = (dispatch: Dispatch) => ({\r\n  getMainPage: dispatch.mainPage.getMainPage,\r\n  addMainPage: dispatch.mainPage.addMainPage,\r\n  updateMainPage: dispatch.mainPage.updateMainPage,\r\n});\r\n\r\ntype connectedProps = ReturnType<typeof mapState> & ReturnType<typeof mapDispatch>;\r\n\r\ntype IProps = connectedProps & {\r\n  review?: IReviews;\r\n};\r\n\r\nconst MainPage: FC<IProps> = ({ mainPage, getMainPage, addMainPage, updateMainPage }) => {\r\n  const [descriptionHTML, setDescriptionHTML] = useState<string>((mainPage && mainPage.serviceDescription) || '');\r\n  const [form] = Form.useForm();\r\n\r\n  useEffect(() => {\r\n    getMainPage();\r\n  }, [getMainPage]);\r\n\r\n  useEffect(() => {\r\n    if (mainPage) {\r\n      form.setFieldsValue({\r\n        title: mainPage.title,\r\n        subtitle: mainPage.subtitle,\r\n        serviceDescription: mainPage.serviceDescription,\r\n      });\r\n      setDescriptionHTML(mainPage.serviceDescription || '');\r\n    }\r\n  }, [mainPage, form]);\r\n\r\n  const onFinish = (values: IMainPage) => {\r\n    if (mainPage) {\r\n      updateMainPage({ ...values, id: mainPage.id });\r\n    } else {\r\n      addMainPage(values);\r\n    }\r\n    form.resetFields();\r\n    setDescriptionHTML('');\r\n  };\r\n\r\n  const onFinishFailed = (errorInfo: any) => {\r\n    console.log('Failed:', errorInfo);\r\n  };\r\n\r\n  const onDescriptionChange = (event: React.ChangeEvent<HTMLTextAreaElement>) => {\r\n    setDescriptionHTML(event.target.value || '');\r\n  };\r\n\r\n  return (\r\n    <Form form={form} layout=\"vertical\" name=\"mainPage\" onFinish={onFinish} onFinishFailed={onFinishFailed}>\r\n      <Form.Item label=\"Заголовок\" name=\"title\" rules={[{ required: true, message: 'Введите заголовок' }]}>\r\n        <Input />\r\n      </Form.Item>\r\n      <Form.Item label=\"Подзаголовок\" name=\"subtitle\" rules={[{ required: true, message: 'Введите подзаголовок' }]}>\r\n        <Input />\r\n      </Form.Item>\r\n      <Form.Item\r\n        label=\"Описание сервиса\"\r\n        name=\"serviceDescription\"\r\n        rules={[{ required: true, message: 'Введите описание сервиса' }]}\r\n        tooltip={<MarkdownTooltip text={tooltipText} />}\r\n      >\r\n        <Input.TextArea rows={4} onChange={onDescriptionChange} />\r\n      </Form.Item>\r\n      {descriptionHTML && (\r\n        <div>\r\n          Предпросмотр описания\r\n          <div\r\n            dangerouslySetInnerHTML={{ __html: marked(descriptionHTML) }}\r\n            style={{ backgroundColor: 'white', border: '1px solid #d9d9d9', padding: '10px', margin: '10px 0px 20px 0px' }}\r\n          />\r\n        </div>\r\n      )}\r\n\r\n      <Form.Item>\r\n        <Button type=\"primary\" htmlType=\"submit\">\r\n          Сохранить\r\n        </Button>\r\n      </Form.Item>\r\n    </Form>\r\n  );\r\n};\r\n\r\nexport default connect(mapState, mapDispatch)(MainPage);\r\n","import React, { FC, useEffect, useState } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Dispatch, IRootState } from '../../redux/store';\r\nimport { Button, Checkbox, Col, Form, Input, Row } from 'antd';\r\nimport marked from 'marked';\r\nimport SingleUpload from '../common/SingleUpload';\r\nimport { IServicesForm, IServicesFromServer, IServicesToServer } from '../../models/services';\r\nimport { IOffices } from '../../models/offices';\r\nimport MarkdownTooltip from '../common/MarkdownTooltip';\r\nimport { tooltipText } from '../../constants/tooltipText';\r\n\r\nconst mapState = (state: IRootState) => ({});\r\n\r\nconst mapDispatch = (dispatch: Dispatch) => ({\r\n  addServices: dispatch.services.addServices,\r\n  updateServices: dispatch.services.updateServices,\r\n  deleteServices: dispatch.services.deleteServices,\r\n});\r\n\r\ntype connectedProps = ReturnType<typeof mapState> & ReturnType<typeof mapDispatch>;\r\n\r\ntype IProps = connectedProps & {\r\n  service?: IServicesFromServer;\r\n  offices: IOffices[] | null;\r\n};\r\n\r\nconst Service: FC<IProps> = ({ addServices, updateServices, deleteServices, service, offices }) => {\r\n  const [descriptionHTML, setDescriptionHTML] = useState<string>((service && service.description) || '');\r\n  const [form] = Form.useForm();\r\n\r\n  useEffect(() => {\r\n    if (service) {\r\n      form.setFieldsValue({\r\n        title: service.title,\r\n        cost: service.cost,\r\n        description: service.description,\r\n        text: service.text,\r\n        image: service.image,\r\n        icon: service.icon,\r\n        officesIds: [...service.offices.map((item) => item.serviceOffice.isAvailable && item.serviceOffice.officeId)],\r\n      });\r\n      setDescriptionHTML(service.description || '');\r\n    }\r\n  }, [service, form]);\r\n\r\n  const onFinish = ({ officesIds, ...values }: IServicesForm) => {\r\n    if (!offices) {\r\n      return;\r\n    }\r\n    if (service) {\r\n      const updateData: IServicesToServer = {\r\n        ...values,\r\n        servicesOffices: service.offices.map((office) => ({\r\n          id: office.serviceOffice.id,\r\n          officeId: office.serviceOffice.officeId,\r\n          isAvailable: officesIds.some((id) => id === office.serviceOffice.officeId),\r\n        })),\r\n        newServicesOffices: offices\r\n          .filter((item) => !service.offices.some((elem) => elem.id === item.id))\r\n          .map((office) => {\r\n            return {\r\n              officeId: office.id,\r\n              isAvailable: officesIds.some((id) => id === office.id),\r\n            };\r\n          }),\r\n      };\r\n      updateServices({ ...updateData, id: service.id });\r\n    } else {\r\n      const addData: IServicesToServer = {\r\n        ...values,\r\n        servicesOffices: offices.map((office) => ({\r\n          officeId: office.id,\r\n          isAvailable: officesIds.some((id) => id === office.id),\r\n        })),\r\n      };\r\n      addServices(addData);\r\n    }\r\n    form.resetFields();\r\n    setDescriptionHTML('');\r\n  };\r\n\r\n  const onFinishFailed = (errorInfo: any) => {\r\n    console.log('Failed:', errorInfo);\r\n  };\r\n\r\n  const onDeleteService = () => {\r\n    if (service) {\r\n      deleteServices(service.id);\r\n    }\r\n  };\r\n\r\n  const onDescriptionChange = (event: React.ChangeEvent<HTMLTextAreaElement>) => {\r\n    setDescriptionHTML(event.target.value || '');\r\n  };\r\n\r\n  return (\r\n    <Form form={form} name=\"service\" layout=\"vertical\" onFinish={onFinish} onFinishFailed={onFinishFailed}>\r\n      <Form.Item label=\"Заголовок\" name=\"title\" rules={[{ required: true, message: 'Введите заголовок' }]}>\r\n        <Input />\r\n      </Form.Item>\r\n      <Form.Item label=\"Стоимость\" name=\"cost\" rules={[{ required: true, message: 'Введите стоимость' }]}>\r\n        <Input />\r\n      </Form.Item>\r\n      <Form.Item label=\"Текст\" name=\"text\" rules={[{ required: true, message: 'Введите текст' }]}>\r\n        <Input />\r\n      </Form.Item>\r\n      <Form.Item\r\n        label=\"Описание\"\r\n        name=\"description\"\r\n        tooltip={<MarkdownTooltip text={tooltipText} />}\r\n        rules={[{ required: true, message: 'Введите описание' }]}\r\n      >\r\n        <Input.TextArea rows={4} onChange={onDescriptionChange} />\r\n      </Form.Item>\r\n      {descriptionHTML && (\r\n        <div>\r\n          Предпросмотр описания\r\n          <div\r\n            dangerouslySetInnerHTML={{ __html: marked(descriptionHTML) }}\r\n            style={{ backgroundColor: 'white', border: '1px solid #d9d9d9', padding: '10px', margin: '10px 0px 20px 0px' }}\r\n          />\r\n        </div>\r\n      )}\r\n      <Form.Item name=\"officesIds\" label=\"Услуга доступна:\">\r\n        <Checkbox.Group>\r\n          {offices && (\r\n            <Row>\r\n              {offices.map((office) => (\r\n                <Col key={office.id}>\r\n                  <Checkbox value={office.id}>{office.address}</Checkbox>\r\n                </Col>\r\n              ))}\r\n            </Row>\r\n          )}\r\n        </Checkbox.Group>\r\n      </Form.Item>\r\n      <div className=\"uploadsBlock\">\r\n        {service && (\r\n          <>\r\n            <Form.Item label=\"Картинка\" name=\"image\">\r\n              <SingleUpload form={form} url={service.image} />\r\n            </Form.Item>\r\n            <Form.Item label=\"Иконка\" name=\"icon\">\r\n              <SingleUpload form={form} url={service.icon} formName=\"icon\" />\r\n            </Form.Item>\r\n          </>\r\n        )}\r\n        {!service && (\r\n          <>\r\n            <Form.Item label=\"Картинка\" name=\"image\">\r\n              <SingleUpload form={form} />\r\n            </Form.Item>\r\n            <Form.Item label=\"Иконка\" name=\"icon\">\r\n              <SingleUpload form={form} formName=\"icon\" />\r\n            </Form.Item>\r\n          </>\r\n        )}\r\n      </div>\r\n      <Form.Item>\r\n        <Button type=\"primary\" htmlType=\"submit\">\r\n          Сохранить\r\n        </Button>\r\n        {service && (\r\n          <Button type=\"primary\" danger style={{ marginLeft: '10px' }} onClick={onDeleteService}>\r\n            Удалить\r\n          </Button>\r\n        )}\r\n      </Form.Item>\r\n    </Form>\r\n  );\r\n};\r\n\r\nexport default connect(mapState, mapDispatch)(Service);\r\n","import React, { FC } from 'react';\r\n\r\ninterface IProps {\r\n  text?: string;\r\n}\r\n\r\nconst NoContent: FC<IProps> = ({ text }) => {\r\n  return <div className=\"noContent\">{text || 'Нет контента'}</div>;\r\n};\r\n\r\nexport default NoContent;\r\n","import React, { FC, useEffect } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Dispatch, IRootState } from '../../redux/store';\r\nimport { Col, Row, Tabs } from 'antd';\r\nimport Service from './Service';\r\nimport NoContent from '../common/NoContent';\r\n\r\nconst mapState = (state: IRootState) => ({\r\n  services: state.services.data,\r\n  offices: state.offices.data,\r\n});\r\n\r\nconst mapDispatch = (dispatch: Dispatch) => ({\r\n  getServices: dispatch.services.getServices,\r\n  getOffices: dispatch.offices.getOffices,\r\n});\r\n\r\ntype connectedProps = ReturnType<typeof mapState> & ReturnType<typeof mapDispatch>;\r\n\r\ntype IProps = connectedProps & {};\r\n\r\nconst Services: FC<IProps> = ({ services, getServices, offices, getOffices }) => {\r\n  useEffect(() => {\r\n    getServices();\r\n    getOffices();\r\n  }, [getServices, getOffices]);\r\n\r\n  const onTabChange = (activeKey: string) => {};\r\n\r\n  return (\r\n    <Row justify=\"center\" align=\"middle\" className=\"page-wrapper\">\r\n      <Col span={22}>\r\n        {offices && !offices.length ? (\r\n          <NoContent text=\"Чтобы добавлять услуги сначала нужно добавить контакты\" />\r\n        ) : (\r\n          <Tabs\r\n            defaultActiveKey={services && services.length ? services[0].id.toString() : 'new'}\r\n            onChange={onTabChange}\r\n            type=\"card\"\r\n          >\r\n            {services &&\r\n              services.map((service) => (\r\n                <Tabs.TabPane tab={service.title} key={service.id}>\r\n                  <Service service={service} offices={offices} />\r\n                </Tabs.TabPane>\r\n              ))}\r\n            <Tabs.TabPane tab=\"+\" key=\"new\">\r\n              <Service offices={offices} />\r\n            </Tabs.TabPane>\r\n          </Tabs>\r\n        )}\r\n      </Col>\r\n    </Row>\r\n  );\r\n};\r\n\r\nexport default connect(mapState, mapDispatch)(Services);\r\n","import React, { FC, useState } from 'react';\r\nimport { Upload, message } from 'antd';\r\nimport { DeleteOutlined, LoadingOutlined, PlusOutlined } from '@ant-design/icons';\r\nimport { RcFile, UploadChangeParam, UploadFile } from 'antd/lib/upload/interface';\r\nimport { IUploads } from '../../models/uploads';\r\nimport { imageUploadUrl } from '../../constants/urls';\r\nimport { ICorporatesClientImages } from '../../models/corporateClientsImages';\r\n\r\nfunction beforeUpload(file: RcFile) {\r\n  const isJpgOrPng = file.type === 'image/jpeg' || file.type === 'image/png' || file.type === 'image/svg+xml';\r\n  if (!isJpgOrPng) {\r\n    message.error('Можно загружать только JPG/PNG/SVG файлы!');\r\n  }\r\n  const isLt2M = file.size / 1024 / 1024 < 5;\r\n  if (!isLt2M) {\r\n    message.error('Картинка должна быть меньше 5MB!');\r\n  }\r\n  return isJpgOrPng && isLt2M;\r\n}\r\n\r\ninterface IProps {\r\n  images?: ICorporatesClientImages[];\r\n  saveImage: (image: IUploads) => void;\r\n  deleteImage: (imageId: number) => void;\r\n}\r\n\r\nconst ImageGalaryUpload: FC<IProps> = ({ images, saveImage, deleteImage }) => {\r\n  const [loading, setLoading] = useState<boolean>(false);\r\n\r\n  const handleChange = (info: UploadChangeParam<UploadFile<IUploads>>) => {\r\n    if (info.file.status === 'uploading') {\r\n      setLoading(true);\r\n      return;\r\n    }\r\n    if (info.file.status === 'done') {\r\n      setLoading(false);\r\n      if (info.file.response) {\r\n        saveImage(info.file.response);\r\n      }\r\n    }\r\n  };\r\n  const handleRemove = (id: number) => () => {\r\n    if (id) {\r\n      deleteImage(id);\r\n    }\r\n  };\r\n\r\n  const uploadButton = (\r\n    <div>\r\n      {loading ? <LoadingOutlined /> : <PlusOutlined />}\r\n      <div style={{ marginTop: 8 }}>Загрузить</div>\r\n    </div>\r\n  );\r\n  return (\r\n    <div className=\"imageGalaryUpload\">\r\n      {images &&\r\n        images.map(image => (\r\n          <div key={image.corporateClientImage.id} className=\"imageGalaryUpload__imageContainer\">\r\n            <div className=\"imageGalaryUpload__imageCover\">\r\n              <div className=\"imageGalaryUpload__deleteButton\" onClick={handleRemove(image.corporateClientImage.imageId)}>\r\n                <DeleteOutlined style={{ fontSize: '20px' }} />\r\n                <div>Удалить</div>\r\n              </div>\r\n            </div>\r\n            <div className=\"imageGalaryUpload__image\">\r\n              <img src={image.url} alt=\"avatar\" style={{ width: '100%' }} />\r\n            </div>\r\n          </div>\r\n        ))}\r\n      <div>\r\n        <Upload\r\n          style={{ width: '200px', height: '200px' }}\r\n          name=\"avatar\"\r\n          listType=\"picture-card\"\r\n          showUploadList={false}\r\n          action={imageUploadUrl}\r\n          headers={{ Authorization: localStorage.jwtToken }}\r\n          beforeUpload={beforeUpload}\r\n          onChange={handleChange}\r\n        >\r\n          {uploadButton}\r\n        </Upload>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ImageGalaryUpload;\r\n","import React, { FC, useEffect, useState } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Dispatch, IRootState } from '../../redux/store';\r\nimport { Button, Col, Form, Input, Row } from 'antd';\r\nimport { ICorporateClients } from '../../models/corporateClients';\r\nimport ImageGalaryUpload from '../common/ImageGalaryUpload';\r\nimport { IUploads } from '../../models/uploads';\r\nimport MarkdownTooltip from '../common/MarkdownTooltip';\r\nimport { tooltipText } from '../../constants/tooltipText';\r\nimport marked from 'marked';\r\n\r\nconst mapState = (state: IRootState) => ({\r\n  corporateClients: state.corporateClients.data,\r\n});\r\n\r\nconst mapDispatch = (dispatch: Dispatch) => ({\r\n  getCorporateClients: dispatch.corporateClients.getCorporateClients,\r\n  addCorporateClients: dispatch.corporateClients.addCorporateClients,\r\n  updateCorporateClients: dispatch.corporateClients.updateCorporateClients,\r\n  addCorporateClientsImages: dispatch.corporateClientsImages.addCorporateClientsImages,\r\n  deleteCorporateClientsImages: dispatch.corporateClientsImages.deleteCorporateClientsImages,\r\n});\r\n\r\ntype connectedProps = ReturnType<typeof mapState> & ReturnType<typeof mapDispatch>;\r\n\r\ntype IProps = connectedProps & {};\r\n\r\nconst CorporateClients: FC<IProps> = ({\r\n  corporateClients,\r\n  getCorporateClients,\r\n  addCorporateClients,\r\n  updateCorporateClients,\r\n  addCorporateClientsImages,\r\n  deleteCorporateClientsImages,\r\n}) => {\r\n  const [descriptionHTML, setDescriptionHTML] = useState<string>((corporateClients && corporateClients.description) || '');\r\n  const [infoHTML, setInfoHTML] = useState<string>((corporateClients && corporateClients.info) || '');\r\n\r\n  useEffect(() => {\r\n    getCorporateClients();\r\n  }, [getCorporateClients]);\r\n\r\n  const [form] = Form.useForm();\r\n\r\n  useEffect(() => {\r\n    form.setFieldsValue({\r\n      title: corporateClients && corporateClients.title,\r\n      description: corporateClients && corporateClients.description,\r\n      info: corporateClients && corporateClients.info,\r\n    });\r\n  }, [corporateClients, form]);\r\n\r\n  const onFinish = (values: ICorporateClients) => {\r\n    if (corporateClients) {\r\n      updateCorporateClients({ ...values, id: corporateClients.id });\r\n    } else {\r\n      addCorporateClients(values);\r\n    }\r\n  };\r\n\r\n  const onFinishFailed = (errorInfo: any) => {\r\n    console.log('Failed:', errorInfo);\r\n  };\r\n\r\n  const saveImageHandler = (image: IUploads) => {\r\n    if (corporateClients && corporateClients.id) {\r\n      addCorporateClientsImages({\r\n        corporateClientId: corporateClients.id,\r\n        imageId: image.id,\r\n      });\r\n    }\r\n  };\r\n\r\n  const deleteImageHandler = (imageId: number) => {\r\n    deleteCorporateClientsImages(imageId);\r\n  };\r\n\r\n  const onDescriptionChange = (event: React.ChangeEvent<HTMLTextAreaElement>) => {\r\n    setDescriptionHTML(event.target.value || '');\r\n  };\r\n  const onInfoChange = (event: React.ChangeEvent<HTMLTextAreaElement>) => {\r\n    setInfoHTML(event.target.value || '');\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Row justify=\"center\" className=\"login-wrapper\">\r\n        <Col span={22}>\r\n          <Form form={form} layout=\"vertical\" name=\"carparts\" onFinish={onFinish} onFinishFailed={onFinishFailed}>\r\n            <Form.Item label=\"Заголовок\" name=\"title\" rules={[{ required: true, message: 'Введите заголовок' }]}>\r\n              <Input />\r\n            </Form.Item>\r\n            <Form.Item\r\n              label=\"Описание\"\r\n              name=\"description\"\r\n              tooltip={<MarkdownTooltip text={tooltipText} />}\r\n              rules={[{ required: true, message: 'Введите описание' }]}\r\n            >\r\n              <Input.TextArea rows={4} onChange={onDescriptionChange} />\r\n            </Form.Item>\r\n            {descriptionHTML && (\r\n              <div>\r\n                Предпросмотр описания\r\n                <div\r\n                  dangerouslySetInnerHTML={{ __html: marked(descriptionHTML) }}\r\n                  style={{\r\n                    backgroundColor: 'white',\r\n                    border: '1px solid #d9d9d9',\r\n                    padding: '10px',\r\n                    margin: '10px 0px 20px 0px',\r\n                  }}\r\n                />\r\n              </div>\r\n            )}\r\n            <Form.Item\r\n              label=\"Информация\"\r\n              name=\"info\"\r\n              tooltip={<MarkdownTooltip text={tooltipText} />}\r\n              rules={[{ required: true, message: 'Введите информацию' }]}\r\n            >\r\n              <Input.TextArea rows={4} onChange={onInfoChange} />\r\n            </Form.Item>\r\n            {infoHTML && (\r\n              <div>\r\n                Предпросмотр информации\r\n                <div\r\n                  dangerouslySetInnerHTML={{ __html: marked(infoHTML) }}\r\n                  style={{\r\n                    backgroundColor: 'white',\r\n                    border: '1px solid #d9d9d9',\r\n                    padding: '10px',\r\n                    margin: '10px 0px 20px 0px',\r\n                  }}\r\n                />\r\n              </div>\r\n            )}\r\n            <Form.Item>\r\n              <Button type=\"primary\" htmlType=\"submit\">\r\n                Сохранить\r\n              </Button>\r\n            </Form.Item>\r\n          </Form>\r\n        </Col>\r\n      </Row>\r\n      <Row justify=\"center\" align=\"middle\" className=\"page-wrapper\">\r\n        <Col span={22}>\r\n          <ImageGalaryUpload\r\n            images={corporateClients ? corporateClients.images : []}\r\n            saveImage={saveImageHandler}\r\n            deleteImage={deleteImageHandler}\r\n          />\r\n        </Col>\r\n      </Row>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default connect(mapState, mapDispatch)(CorporateClients);\r\n","import React, { FC, useEffect, useState } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Dispatch, IRootState } from '../../redux/store';\r\nimport { Button, Form, Input } from 'antd';\r\nimport SingleUpload from '../common/SingleUpload';\r\nimport { IPromos } from '../../models/promos';\r\nimport marked from 'marked';\r\nimport MarkdownTooltip from '../common/MarkdownTooltip';\r\nimport { tooltipText } from '../../constants/tooltipText';\r\n\r\nconst mapState = (state: IRootState) => ({});\r\n\r\nconst mapDispatch = (dispatch: Dispatch) => ({\r\n  addPromos: dispatch.promos.addPromos,\r\n  updatePromos: dispatch.promos.updatePromos,\r\n  deletePromos: dispatch.promos.deletePromos,\r\n});\r\n\r\ntype connectedProps = ReturnType<typeof mapState> & ReturnType<typeof mapDispatch>;\r\n\r\ntype IProps = connectedProps & {\r\n  promo?: IPromos;\r\n};\r\n\r\nconst Promo: FC<IProps> = ({ promo, addPromos, updatePromos, deletePromos }) => {\r\n  const [titleForMainHTML, setTitleForMainHTML] = useState<string>((promo && promo.titleForMain) || '');\r\n\r\n  const [form] = Form.useForm();\r\n\r\n  useEffect(() => {\r\n    if (promo) {\r\n      form.setFieldsValue({\r\n        titleForMain: promo.titleForMain || '',\r\n        title: promo.title,\r\n        description: promo.description,\r\n        shortDescription: '',\r\n        image: promo.image,\r\n        sliderImage: promo.sliderImage,\r\n      });\r\n      setTitleForMainHTML(promo.titleForMain || '');\r\n    }\r\n  }, [promo, form]);\r\n\r\n  const onFinish = (values: IPromos) => {\r\n    if (promo) {\r\n      updatePromos({ ...values, id: promo.id });\r\n    } else {\r\n      addPromos(values);\r\n    }\r\n    form.resetFields();\r\n    setTitleForMainHTML('');\r\n  };\r\n\r\n  const onFinishFailed = (errorInfo: any) => {\r\n    console.log('Failed:', errorInfo);\r\n  };\r\n\r\n  const onDeleteReview = () => {\r\n    if (promo && promo.id) {\r\n      deletePromos(promo.id);\r\n    }\r\n  };\r\n\r\n  const onTitleForMainChange = (event: React.ChangeEvent<HTMLTextAreaElement>) => {\r\n    setTitleForMainHTML(event.target.value || '');\r\n  };\r\n\r\n  return (\r\n    <Form form={form} layout=\"vertical\" name=\"promo\" onFinish={onFinish} onFinishFailed={onFinishFailed}>\r\n      <Form.Item\r\n        label=\"Заголовок для главной\"\r\n        name=\"titleForMain\"\r\n        tooltip={<MarkdownTooltip text={tooltipText} />}\r\n        rules={[{ message: 'Введите заголовок для главной' }]}\r\n      >\r\n        <Input.TextArea rows={2} onChange={onTitleForMainChange} />\r\n      </Form.Item>\r\n      {titleForMainHTML && (\r\n        <div>\r\n          Предпросмотр заголовока для главной\r\n          <div\r\n            dangerouslySetInnerHTML={{ __html: marked(titleForMainHTML) }}\r\n            style={{ backgroundColor: 'white', border: '1px solid #d9d9d9', padding: '10px', margin: '10px 0px 20px 0px' }}\r\n          />\r\n        </div>\r\n      )}\r\n      <Form.Item label=\"Заголовок\" name=\"title\" rules={[{ required: true, message: 'Введите заголовок' }]}>\r\n        <Input />\r\n      </Form.Item>\r\n      <Form.Item label=\"Описание\" name=\"description\" rules={[{ required: true, message: 'Введите описание' }]}>\r\n        <Input.TextArea rows={4} />\r\n      </Form.Item>\r\n\r\n      <div className=\"uploadsBlock\">\r\n        {promo && (\r\n          <>\r\n            <Form.Item label=\"Картинка\" name=\"image\">\r\n              <SingleUpload form={form} url={promo.image} />\r\n            </Form.Item>\r\n            <Form.Item label=\"Картинка для слайдера\" name=\"sliderImage\">\r\n              <SingleUpload form={form} formName=\"sliderImage\" url={promo.sliderImage} />\r\n            </Form.Item>\r\n          </>\r\n        )}\r\n        {!promo && (\r\n          <>\r\n            <Form.Item label=\"Картинка\" name=\"image\">\r\n              <SingleUpload form={form} />\r\n            </Form.Item>\r\n            <Form.Item label=\"Картинка для слайдера\" name=\"sliderImage\">\r\n              <SingleUpload form={form} formName=\"sliderImage\" />\r\n            </Form.Item>\r\n          </>\r\n        )}\r\n      </div>\r\n\r\n      <Form.Item>\r\n        <Button type=\"primary\" htmlType=\"submit\">\r\n          Сохранить\r\n        </Button>\r\n        {promo && (\r\n          <Button type=\"primary\" danger style={{ marginLeft: '10px' }} onClick={onDeleteReview}>\r\n            Удалить\r\n          </Button>\r\n        )}\r\n      </Form.Item>\r\n    </Form>\r\n  );\r\n};\r\n\r\nexport default connect(mapState, mapDispatch)(Promo);\r\n","import React, { FC, useEffect } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Dispatch, IRootState } from '../../redux/store';\r\nimport { Col, Row, Tabs } from 'antd';\r\nimport Promo from './Promo';\r\n\r\nconst mapState = (state: IRootState) => ({\r\n  promos: state.promos.data,\r\n});\r\n\r\nconst mapDispatch = (dispatch: Dispatch) => ({\r\n  getPromos: dispatch.promos.getPromos,\r\n});\r\n\r\ntype connectedProps = ReturnType<typeof mapState> & ReturnType<typeof mapDispatch>;\r\n\r\ntype IProps = connectedProps & {};\r\n\r\nconst Promos: FC<IProps> = ({ promos, getPromos }) => {\r\n  useEffect(() => {\r\n    getPromos();\r\n  }, [getPromos]);\r\n\r\n  const onTabChange = (activeKey: string) => {};\r\n\r\n  return (\r\n    <Row justify=\"center\" align=\"middle\" className=\"page-wrapper\">\r\n      <Col span={22}>\r\n        <Tabs defaultActiveKey={promos && promos.length ? promos[0].id.toString() : 'new'} onChange={onTabChange} type=\"card\">\r\n          {promos &&\r\n            promos.map((promos) => (\r\n              <Tabs.TabPane tab={promos.title} key={promos.id}>\r\n                <Promo promo={promos} />\r\n              </Tabs.TabPane>\r\n            ))}\r\n          <Tabs.TabPane tab=\"+\" key=\"new\">\r\n            <Promo />\r\n          </Tabs.TabPane>\r\n        </Tabs>\r\n      </Col>\r\n    </Row>\r\n  );\r\n};\r\n\r\nexport default connect(mapState, mapDispatch)(Promos);\r\n","import React, { FC, useState } from 'react';\r\nimport { Layout, Menu, Row, Col } from 'antd';\r\nimport CarParts from './CarParts';\r\nimport Offices from './Offices';\r\nimport Reviews from './Reviews';\r\nimport MainPage from './MainPage';\r\nimport Services from './Services';\r\nimport CorporateClients from './CorporateClients';\r\nimport Promos from './Promos';\r\n\r\nconst { Header, Content } = Layout;\r\n\r\ninterface IProps {\r\n  onLogout: () => void;\r\n}\r\n\r\nconst Main: FC<IProps> = ({ onLogout }) => {\r\n  const [selectedTab, setSelectedTab] = useState<string>('1');\r\n\r\n  const onMenuClick = (e: any) => {\r\n    setSelectedTab(e.key);\r\n  };\r\n  const renderTab = () => {\r\n    switch (selectedTab) {\r\n      case '1':\r\n        return <MainPage />;\r\n      case '2':\r\n        return <Services />;\r\n      case '3':\r\n        return <CarParts />;\r\n      case '4':\r\n        return <CorporateClients />;\r\n      case '5':\r\n        return <Offices />;\r\n      case '6':\r\n        return <Promos />;\r\n      case '7':\r\n        return <Reviews />;\r\n      case '8':\r\n        onLogout();\r\n        return null;\r\n\r\n      default:\r\n        return null;\r\n    }\r\n  };\r\n  return (\r\n    <Layout className=\"main__layout\">\r\n      <Header>\r\n        <div className=\"logo\" />\r\n        <Menu theme=\"dark\" mode=\"horizontal\" selectedKeys={[selectedTab]} onClick={onMenuClick}>\r\n          <Menu.Item key=\"1\">Главная</Menu.Item>\r\n          <Menu.Item key=\"2\">Услуги</Menu.Item>\r\n          <Menu.Item key=\"3\">Запчасти</Menu.Item>\r\n          <Menu.Item key=\"4\">Юр.лицам</Menu.Item>\r\n          <Menu.Item key=\"5\">Контакты</Menu.Item>\r\n          <Menu.Item key=\"6\">Акции</Menu.Item>\r\n          <Menu.Item key=\"7\">Отзывы</Menu.Item>\r\n          <Menu.Item key=\"8\">Выход</Menu.Item>\r\n        </Menu>\r\n      </Header>\r\n      <Content className=\"main__content\">\r\n        <Row justify=\"space-around\" align=\"middle\">\r\n          <Col span={22}>\r\n            <div className=\"site-layout-content\">{renderTab()}</div>\r\n          </Col>\r\n        </Row>\r\n      </Content>\r\n    </Layout>\r\n  );\r\n};\r\n\r\nexport default Main;\r\n","import React, { FC } from 'react';\r\nimport { Spin } from 'antd';\r\n\r\ninterface IProps {\r\n  loading: boolean;\r\n}\r\nconst Spiner: FC<IProps> = ({ loading }) => {\r\n  return (\r\n    <div className=\"spiner\">\r\n      <Spin size=\"large\" spinning={loading} className=\"spiner_center\" />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Spiner;\r\n","import React, { FC } from 'react';\r\nimport { Switch, Route } from 'react-router-dom';\r\nimport { connect } from 'react-redux';\r\nimport jwt_decode, { JwtPayload } from 'jwt-decode';\r\nimport { Row, Col } from 'antd';\r\nimport { Dispatch, IRootState } from '../../redux/store';\r\nimport Login from '../auth/Login';\r\nimport Main from './Main';\r\nimport Spiner from '../common/Spiner';\r\n\r\nconst mapState = (state: IRootState) => ({\r\n  onGlobalLoading: state.loading.global\r\n});\r\n\r\nconst mapDispatch = (dispatch: Dispatch) => ({ onLogin: dispatch.auth.onLogin, onLogout: dispatch.auth.onLogout });\r\n\r\ntype connectedProps = ReturnType<typeof mapState> & ReturnType<typeof mapDispatch>;\r\n\r\ntype IProps = connectedProps & {};\r\n\r\nconst Layout: FC<IProps> = ({ onGlobalLoading, onLogout }) => {\r\n  let isEligible = false;\r\n\r\n  if (localStorage.jwtToken) {\r\n    const decoded = jwt_decode<JwtPayload>(localStorage.jwtToken);\r\n    const currentTime = Date.now() / 1000;\r\n    if (decoded && decoded.exp && decoded.exp > currentTime) {\r\n      isEligible = true;\r\n    }\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Row justify=\"space-around\" className=\"main-wrapper\">\r\n        <Col span={24}>\r\n          <Switch>\r\n            {!isEligible && <Route exact path=\"*\" component={Login}></Route>}\r\n            {isEligible && <Route path=\"/\" render={() => <Main onLogout={onLogout} />}></Route>}\r\n          </Switch>\r\n        </Col>\r\n      </Row>\r\n      {onGlobalLoading && <Spiner loading={onGlobalLoading} />}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default connect(mapState, mapDispatch)(Layout);\r\n","import React, { FC } from 'react';\r\nimport { BrowserRouter } from 'react-router-dom';\r\nimport { Provider } from 'react-redux';\r\nimport './App.css';\r\n\r\nimport { store, history } from './redux/store';\r\nimport { ConnectedRouter } from 'connected-react-router';\r\nimport Layout from './components/layout/Layout';\r\n\r\nconst App: FC = () => {\r\n  return (\r\n    <Provider store={store}>\r\n      <BrowserRouter>\r\n        <ConnectedRouter history={history}>\r\n          <Layout />\r\n        </ConnectedRouter>\r\n      </BrowserRouter>\r\n    </Provider>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport axios, { AxiosResponse } from 'axios';\r\nimport 'antd/dist/antd.css';\r\nimport './index.css';\r\nimport App from './App';\r\nimport { message } from 'antd';\r\n\r\n// if (process && process.env.NODE_ENV === 'production') {\r\n//   axios.defaults.baseURL = 'https://ptzmaster.ru';\r\n// }\r\n\r\naxios.interceptors.request.use((config) => {\r\n  config.headers.Authorization = localStorage.getItem('jwtToken');\r\n  return config;\r\n});\r\naxios.interceptors.response.use(\r\n  (response) => {\r\n    return response;\r\n  },\r\n  (error) => {\r\n    const response: AxiosResponse<{ error: string }> = error.response;\r\n    if (response && response.data && response.status) {\r\n      switch (response.status) {\r\n        case 422:\r\n          message.error(response.data.error);\r\n          break;\r\n        case 500:\r\n          message.error('Что-то пошло не так, обратитесь к администратору');\r\n          break;\r\n\r\n        default:\r\n          break;\r\n      }\r\n    }\r\n    return Promise.reject(error.response);\r\n  }\r\n);\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n"],"sourceRoot":""}