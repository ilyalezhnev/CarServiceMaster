{"version":3,"sources":["services/AuthSevice.ts","models/auth.ts","services/CarPartsService.ts","models/index.ts","models/carParts.ts","redux/store.ts","components/auth/Login.tsx","components/layout/CarParts.tsx","components/layout/Main.tsx","components/common/Spiner.tsx","components/layout/Layout.tsx","App.tsx","index.tsx"],"names":["AuthSevice","login","params","axios","post","auth","createModel","state","isAuth","errors","reducers","logout","effects","d","onLogin","data","succces","localStorage","setItem","token","onLogout","removeItem","push","url","CarPartsService","getCarParts","get","addCarParts","updateCarParts","id","rest","put","rootModel","carParts","setCarParts","model","history","createBrowserHistory","loadingPlugin","createLoadingPlugin","asNumber","router","connectRouter","store","init","plugins","models","redux","rootReducers","resetStore","middlewares","routerMiddleware","connect","dispatch","justify","align","className","span","layout","name","initialValues","remember","onFinish","values","onFinishFailed","errorInfo","console","log","Item","label","rules","required","message","Password","type","htmlType","useEffect","Form","useForm","form","React","setFieldsValue","title","subtitle","Header","Layout","Content","Main","useState","selectedTab","setSelectedTab","theme","mode","selectedKeys","onClick","e","key","renderTab","Spiner","loading","size","spinning","onGlobalLoading","global","isEligible","jwtToken","decoded","jwt_decode","currentTime","Date","now","exp","exact","path","component","Login","render","App","process","defaults","baseURL","interceptors","request","use","config","headers","Authorization","getItem","response","error","status","Promise","reject","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.b5bca05c.chunk.js","sourcesContent":["import axios from 'axios';\nimport { IAuth, IUserLogin } from '../models/auth';\n\nconst url = '/api/auth';\n\nconst AuthSevice = {\n  login: (params: IUserLogin) => axios.post<IAuth>(`${url}/login`, params)\n};\n\nexport default AuthSevice;\n","import { createModel } from '@rematch/core';\nimport { push } from 'connected-react-router';\nimport { IRootModel } from '.';\nimport AuthSevice from '../services/AuthSevice';\n\ninterface IState {\n  isAuth: boolean;\n  errors: any;\n}\n\nconst initialState: IState = {\n  isAuth: false,\n  errors: null,\n};\n\nexport interface IAuth {\n  succces: boolean;\n  token: string;\n}\n\nexport interface IUserLogin {\n  login: string;\n  password: string;\n}\n\nexport const auth = createModel<IRootModel>()({\n  state: initialState,\n  reducers: {\n    login(state): IState {\n      return { ...state, isAuth: true };\n    },\n    logout(state): IState {\n      return { ...state, isAuth: false };\n    },\n  },\n  effects: (d) => {\n    return {\n      async onLogin(params: IUserLogin) {\n        const { data } = await AuthSevice.login(params);\n        if (data.succces) {\n          localStorage.setItem('jwtToken', data.token);\n          d.auth.login();\n        }\n      },\n      async onLogout() {\n        localStorage.removeItem('jwtToken');\n        d(push('/'));\n        d.auth.logout();\n      },\n    };\n  },\n});\n","import axios from 'axios';\nimport { ICarParts } from '../models/carParts';\n\nconst url = '/api/admin/carparts';\n\nconst CarPartsService = {\n  getCarParts: () => axios.get<ICarParts>(url),\n  addCarParts: (data: ICarParts) => axios.post<ICarParts>(url, data),\n  updateCarParts: ({ id, ...rest }: ICarParts) => axios.put<ICarParts>(`${url}/${id}`, rest)\n};\n\nexport default CarPartsService;\n","import { Models } from '@rematch/core';\nimport { auth } from './auth';\nimport { carParts } from './carParts';\n\nexport interface IRootModel extends Models<IRootModel> {\n  auth: typeof auth;\n  carParts: typeof carParts;\n}\nconst rootModel: IRootModel = { auth, carParts };\n\nexport default rootModel;\n","import { createModel } from '@rematch/core';\nimport { IRootModel } from '.';\nimport CarPartsService from '../services/CarPartsService';\n\ninterface IState {\n  data: ICarParts | null;\n}\n\nconst initialState: IState = {\n  data: null\n};\n\nexport interface ICarParts {\n  id: number;\n  title: string;\n  subtitle: string;\n}\n\nexport const carParts = createModel<IRootModel>()({\n  state: initialState,\n  reducers: {\n    setCarParts(state, data: ICarParts): IState {\n      return { ...state, data };\n    }\n  },\n  effects: d => {\n    return {\n      async getCarParts() {\n        const { data } = await CarPartsService.getCarParts();\n        if (data) {\n          d.carParts.setCarParts(data);\n        }\n      },\n      async addCarParts(model: ICarParts) {\n        const { data } = await CarPartsService.addCarParts(model);\n        if (data) {\n          d.carParts.setCarParts(data);\n        }\n      },\n      async updateCarParts(model: ICarParts) {\n        const { data } = await CarPartsService.updateCarParts(model);\n        if (data) {\n          d.carParts.setCarParts(data);\n        }\n      }\n    };\n  }\n});\n","import { init, RematchDispatch, RematchRootState } from '@rematch/core';\nimport { createBrowserHistory } from 'history';\nimport createLoadingPlugin from '@rematch/loading';\nimport { connectRouter, routerMiddleware } from 'connected-react-router';\nimport models, { IRootModel } from '../models';\n\nexport const history = createBrowserHistory();\n\nconst loadingPlugin = createLoadingPlugin<IRootModel>({ asNumber: false });\nconst router = connectRouter(history);\n\nexport const store = init({\n  plugins: [loadingPlugin],\n  models,\n  redux: {\n    rootReducers: {\n      resetStore: () => undefined\n    },\n    middlewares: [routerMiddleware(history)],\n    reducers: {\n      router\n    }\n  }\n});\n\ninterface ILoadingPlugin {\n  loading: {\n    global: boolean;\n    models: RematchRootState<IRootModel>;\n    effects: Dispatch;\n  };\n}\n\ninterface IConnectedRouter {\n  router: {\n    location: {\n      pathname: string;\n      search: string;\n      hash: string;\n      key: string;\n      query: { [key: string]: string };\n    };\n  };\n}\n\nexport type Store = typeof store;\nexport type Dispatch = RematchDispatch<IRootModel>;\nexport type IRootState = RematchRootState<IRootModel> & ILoadingPlugin & IConnectedRouter;\nexport const dispatchResetStore = () => store.dispatch({ type: 'resetStore' });\n","import React, { FC } from 'react';\nimport { connect } from 'react-redux';\nimport { Dispatch, IRootState } from '../../redux/store';\nimport { Button, Col, Form, Input, Row } from 'antd';\nimport { IUserLogin } from '../../models/auth';\n\nconst mapState = (state: IRootState) => ({});\n\nconst mapDispatch = (dispatch: Dispatch) => ({ onLogin: dispatch.auth.onLogin });\n\ntype connectedProps = ReturnType<typeof mapState> & ReturnType<typeof mapDispatch>;\n\ntype IProps = connectedProps & {};\n\nconst Login: FC<IProps> = ({ onLogin }) => {\n  const onFinish = (values: IUserLogin) => {\n    onLogin({ ...values });\n  };\n\n  const onFinishFailed = (errorInfo: any) => {\n    console.log('Failed:', errorInfo);\n  };\n\n  return (\n    <Row justify=\"center\" align=\"middle\" className=\"login-wrapper\">\n      <Col span={10}>\n        <Form\n          layout=\"vertical\"\n          name=\"basic\"\n          initialValues={{ remember: true }}\n          onFinish={onFinish}\n          onFinishFailed={onFinishFailed}\n        >\n          <Form.Item label=\"Логин\" name=\"login\" rules={[{ required: true, message: 'Введите логин' }]}>\n            <Input />\n          </Form.Item>\n\n          <Form.Item label=\"Пароль\" name=\"password\" rules={[{ required: true, message: 'Введите пароль' }]}>\n            <Input.Password />\n          </Form.Item>\n\n          <Form.Item>\n            <Button type=\"primary\" htmlType=\"submit\">\n              Submit\n            </Button>\n          </Form.Item>\n        </Form>\n      </Col>\n    </Row>\n  );\n};\n\nexport default connect(mapState, mapDispatch)(Login);\n","import React, { FC, useEffect } from 'react';\nimport { connect } from 'react-redux';\nimport { Dispatch, IRootState } from '../../redux/store';\nimport { Button, Col, Form, Input, Row } from 'antd';\nimport { ICarParts } from '../../models/carParts';\n\nconst mapState = (state: IRootState) => ({\n  carParts: state.carParts.data\n});\n\nconst mapDispatch = (dispatch: Dispatch) => ({\n  getCarParts: dispatch.carParts.getCarParts,\n  addCarParts: dispatch.carParts.addCarParts,\n  updateCarParts: dispatch.carParts.updateCarParts\n});\n\ntype connectedProps = ReturnType<typeof mapState> & ReturnType<typeof mapDispatch>;\n\ntype IProps = connectedProps & {};\n\nconst CarParts: FC<IProps> = ({ carParts, getCarParts, addCarParts, updateCarParts }) => {\n  useEffect(() => {\n    getCarParts();\n  }, []);\n\n  const [form] = Form.useForm();\n\n  React.useEffect(() => {\n    form.setFieldsValue({\n      title: carParts && carParts.title,\n      subtitle: carParts && carParts.subtitle\n    });\n  }, [carParts]);\n\n  const onFinish = (values: ICarParts) => {\n    if (carParts) {\n      updateCarParts({ ...values, id: carParts.id });\n    } else {\n      addCarParts(values);\n    }\n  };\n\n  const onFinishFailed = (errorInfo: any) => {\n    console.log('Failed:', errorInfo);\n  };\n\n  return (\n    <Row justify=\"center\" align=\"middle\" className=\"login-wrapper\">\n      <Col span={10}>\n        <Form form={form} layout=\"vertical\" name=\"basic\" onFinish={onFinish} onFinishFailed={onFinishFailed}>\n          <Form.Item label=\"Заголовок\" name=\"title\" rules={[{ required: true, message: 'Введите заголовок' }]}>\n            <Input />\n          </Form.Item>\n\n          <Form.Item label=\"Подзаголовок\" name=\"subtitle\" rules={[{ required: true, message: 'Введите подзаголовок' }]}>\n            <Input />\n          </Form.Item>\n\n          <Form.Item>\n            <Button type=\"primary\" htmlType=\"submit\">\n              Submit\n            </Button>\n          </Form.Item>\n        </Form>\n      </Col>\n    </Row>\n  );\n};\n\nexport default connect(mapState, mapDispatch)(CarParts);\n","import React, { FC, useState } from 'react';\nimport { Layout, Menu, Row, Col } from 'antd';\nimport CarParts from './CarParts';\n\nconst { Header, Content } = Layout;\n\ninterface IProps {\n  onLogout: () => void;\n}\n\nconst Main: FC<IProps> = ({ onLogout }) => {\n  const [selectedTab, setSelectedTab] = useState<string>('1');\n\n  const onMenuClick = (e: any) => {\n    setSelectedTab(e.key);\n  };\n  const renderTab = () => {\n    switch (selectedTab) {\n      case '1':\n        return <div>1</div>;\n      case '2':\n        return <div>2</div>;\n      case '3':\n        return <CarParts />;\n      case '4':\n        return <div>4</div>;\n      case '5':\n        return <div>5</div>;\n      case '6':\n        return <div>6</div>;\n      case '7':\n        onLogout();\n        return null;\n\n      default:\n        return null;\n    }\n  };\n  return (\n    <Layout className=\"layout\">\n      <Header>\n        <div className=\"logo\" />\n        <Menu theme=\"dark\" mode=\"horizontal\" selectedKeys={[selectedTab]} onClick={onMenuClick}>\n          <Menu.Item key=\"1\">Главная</Menu.Item>\n          <Menu.Item key=\"2\">Услуги</Menu.Item>\n          <Menu.Item key=\"3\">Запчасти</Menu.Item>\n          <Menu.Item key=\"4\">Юр.лицам</Menu.Item>\n          <Menu.Item key=\"5\">Контакты</Menu.Item>\n          <Menu.Item key=\"6\">Акции</Menu.Item>\n          <Menu.Item key=\"7\">Выход</Menu.Item>\n        </Menu>\n      </Header>\n      <Content>\n        <Row justify=\"space-around\" align=\"middle\">\n          <Col span={22}>\n            <div className=\"site-layout-content\">{renderTab()}</div>\n          </Col>\n        </Row>\n      </Content>\n    </Layout>\n  );\n};\n\nexport default Main;\n","import React, { FC } from 'react';\nimport { Spin } from 'antd';\n\ninterface IProps {\n  loading: boolean;\n}\nconst Spiner: FC<IProps> = ({ loading }) => {\n  return (\n    <div className=\"spiner\">\n      <Spin size=\"large\" spinning={loading} className=\"spiner_center\" />\n    </div>\n  );\n};\n\nexport default Spiner;\n","import React, { FC } from 'react';\nimport { Switch, Route } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport jwt_decode, { JwtPayload } from 'jwt-decode';\nimport { Row, Col } from 'antd';\nimport { Dispatch, IRootState } from '../../redux/store';\nimport Login from '../auth/Login';\nimport Main from './Main';\nimport Spiner from '../common/Spiner';\n\nconst mapState = (state: IRootState) => ({\n  onGlobalLoading: state.loading.global\n});\n\nconst mapDispatch = (dispatch: Dispatch) => ({ onLogin: dispatch.auth.onLogin, onLogout: dispatch.auth.onLogout });\n\ntype connectedProps = ReturnType<typeof mapState> & ReturnType<typeof mapDispatch>;\n\ntype IProps = connectedProps & {};\n\nconst Layout: FC<IProps> = ({ onGlobalLoading, onLogout }) => {\n  let isEligible = false;\n\n  if (localStorage.jwtToken) {\n    const decoded = jwt_decode<JwtPayload>(localStorage.jwtToken);\n    const currentTime = Date.now() / 1000;\n    if (decoded && decoded.exp && decoded.exp > currentTime) {\n      isEligible = true;\n    }\n  }\n\n  return (\n    <>\n      <Row justify=\"space-around\" className=\"main-wrapper\">\n        <Col span={24}>\n          <Switch>\n            {!isEligible && <Route exact path=\"*\" component={Login}></Route>}\n            {isEligible && <Route path=\"/\" render={() => <Main onLogout={onLogout} />}></Route>}\n          </Switch>\n        </Col>\n      </Row>\n      {onGlobalLoading && <Spiner loading={onGlobalLoading} />}\n    </>\n  );\n};\n\nexport default connect(mapState, mapDispatch)(Layout);\n","import React, { FC } from 'react';\nimport { BrowserRouter } from 'react-router-dom';\nimport { Provider } from 'react-redux';\nimport './App.css';\n\nimport { store, history } from './redux/store';\nimport { ConnectedRouter } from 'connected-react-router';\nimport Layout from './components/layout/Layout';\n\nconst App: FC = () => {\n  return (\n    <Provider store={store}>\n      <BrowserRouter>\n        <ConnectedRouter history={history}>\n          <Layout />\n        </ConnectedRouter>\n      </BrowserRouter>\n    </Provider>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport axios, { AxiosResponse } from 'axios';\nimport 'antd/dist/antd.css';\nimport './index.css';\nimport App from './App';\nimport { message } from 'antd';\n\nif (process && process.env.NODE_ENV === 'production') {\n  axios.defaults.baseURL = 'http://ptzmaster.ru';\n}\naxios.interceptors.request.use(config => {\n  config.headers.Authorization = localStorage.getItem('jwtToken');\n  return config;\n});\naxios.interceptors.response.use(\n  response => {\n    return response;\n  },\n  error => {\n    const response: AxiosResponse<{ error: string }> = error.response;\n    if (response && response.data && response.status) {\n      switch (response.status) {\n        case 422:\n          message.error(response.data.error);\n          break;\n        case 500:\n          message.error('Что-то пошло не так, обратитесь к администратору');\n          break;\n\n        default:\n          break;\n      }\n    }\n    return Promise.reject(error.response);\n  }\n);\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}